/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (function() {

eval("document.addEventListener(\"DOMContentLoaded\", () => {\n  let selectedDate;\n  let investmentAmount;\n  let currentDate = new Date().toISOString().split('T')[0];\n  const stockButtons = document.querySelectorAll(\".button-container button\");\n  stockButtons.forEach(button => {\n    button.classList.add(\"hide\"); // Initially hide all stock buttons\n  });\n\n  createGraph(\"GOOGL\", \"2023-01-01\", currentDate, 5000);\n  var modal = document.getElementById(\"myModal\");\n  var btn = document.getElementById(\"openModalBtn\");\n  var closeBtn = document.getElementsByClassName(\"close\")[0];\n  btn.onclick = function () {\n    modal.style.display = \"block\";\n  };\n  closeBtn.onclick = function () {\n    modal.style.display = \"none\";\n  };\n  window.onclick = function (event) {\n    if (event.target == modal) {\n      modal.style.display = \"none\";\n    }\n  };\n\n  // createEmptyGraph();\n\n  // function createEmptyGraph() {\n  //     const margin = { top: 20, right: 20, bottom: 30, left: 50 };\n  //     const width = 600 - margin.left - margin.right;\n  //     const height = 400 - margin.top - margin.bottom;\n\n  //     const svg = d3.select('#chart-container')\n  //         .append('svg')\n  //         .attr('width', width + margin.left + margin.right)\n  //         .attr('height', height + margin.top + margin.bottom)\n  //         .append('g')\n  //         .attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n  //     // Define X and Y scales\n  //     const xScale = d3.scaleBand().range([0, width]).padding(0.1);\n  //     const yScale = d3.scaleLinear().range([height, 0]);\n\n  //     // Add X and Y axis elements\n  //     const xAxis = d3.axisBottom(xScale);\n  //     const yAxis = d3.axisLeft(yScale);\n\n  //     // Append X and Y axes to the graph\n  //     svg.append('g')\n  //         .attr('class', 'x-axis')\n  //         .attr('transform', 'translate(0,' + height + ')')\n  //         .call(xAxis);\n\n  //     svg.append('g')\n  //         .attr('class', 'y-axis')\n  //         .call(yAxis);\n\n  //     // Add labels for X and Y axes (if needed)\n  //     svg.append('text')\n  //         .attr('transform', 'translate(' + (width / 2) + ' ,' + (height + margin.top + 20) + ')')\n  //         .style('text-anchor', 'middle')\n  //         .text('Date');\n\n  //     svg.append('text')\n  //         .attr('transform', 'rotate(-90)')\n  //         .attr('y', 0 - margin.left)\n  //         .attr('x', 0 - (height / 2))\n  //         .attr('dy', '1em')\n  //         .style('text-anchor', 'middle')\n  //         .text('Price ($)');\n\n  //     const svgElements = document.querySelectorAll(\"svg\");\n\n  //     // Iterate over each SVG element and set the height\n  //     svgElements.forEach(svgElement => {\n  //         svgElement.style.height = \"500px\";\n  //     });\n  // }\n\n  const findBuySellPoints = prices => {\n    let n = prices.length;\n    let buySellPoints = [];\n    let i = 0;\n    while (i < n - 1) {\n      // Find local minima as potential buy point\n      while (i < n - 1 && prices[i] >= prices[i + 1]) {\n        i++;\n      }\n      if (i === n - 1) {\n        break;\n      }\n      let buy = i;\n\n      // Find local maxima as potential sell point\n      while (i < n - 1 && prices[i] <= prices[i + 1]) {\n        i++;\n      }\n      let sell = i;\n\n      // Add buy and sell points to the result array\n      buySellPoints.push({\n        buy: {\n          day: buy,\n          price: prices[buy]\n        },\n        sell: {\n          day: sell,\n          price: prices[sell]\n        }\n      });\n    }\n    return buySellPoints;\n  };\n  let final_num_shares;\n  const calculateInvestedProfit = (investmentAmount, buySellPoints) => {\n    let grossRevenueFromInvestment = investmentAmount;\n    final_num_shares = 0;\n    let netProfit;\n    for (let a = 0; a < buySellPoints.length; a++) {\n      final_num_shares = grossRevenueFromInvestment / buySellPoints[a].buy.price;\n      grossRevenueFromInvestment = final_num_shares * buySellPoints[a].sell.price;\n    }\n    netProfit = grossRevenueFromInvestment - investmentAmount;\n    return netProfit;\n  };\n  var appleStock = document.getElementById(\"apple\");\n  appleStock.addEventListener(\"click\", function () {\n    createGraph(\"AAPL\", selectedDate, currentDate, investmentAmount);\n  });\n  var msftStock = document.getElementById(\"microsoft\");\n  msftStock.addEventListener(\"click\", function () {\n    createGraph(\"MSFT\", selectedDate, currentDate, investmentAmount);\n  });\n  var pltrStock = document.getElementById(\"palantir\");\n  pltrStock.addEventListener(\"click\", function () {\n    createGraph(\"PLTR\", selectedDate, currentDate, investmentAmount);\n  });\n  var tslaStock = document.getElementById(\"tesla\");\n  tslaStock.addEventListener(\"click\", function () {\n    createGraph(\"TSLA\", selectedDate, currentDate, investmentAmount);\n  });\n  function removeExistingGraph() {\n    const existingGraph = document.querySelector('#chart-container svg');\n    if (existingGraph) {\n      existingGraph.remove();\n    }\n  }\n  function createGraph(stockTicker, selectedDate, currentDate, investmentAmount) {\n    // const existingGraph = document.querySelector('#chart-container svg:nth-child(2)');\n    // const svg = d3.select('#chart-container svg');\n    // svg.selectAll('*').remove();\n    // if (existingGraph) {\n    //     existingGraph.remove();\n    // }\n\n    removeExistingGraph();\n    removeExistingGraph();\n\n    // fetch(`https://api.stockdata.org/v1/data/eod?symbols=${stockTicker}&api_token=Bc9kdoAsBS9RinZk1vqXCzh5owpQenRGf4UrSJl6&date_from=${selectedDate}&date_to=${currentDate}`)\n    fetch(`http://api.marketstack.com/v1/eod?access_key=a102fb3f246cfc748eabb0cbafd35e2b&symbols=${stockTicker}&date_from=${selectedDate}&date_to=${currentDate}`).then(response => response.json()).then(data => {\n      const closingPrices = data.data.map(day => day.close);\n      const dates = data.data.map(date => date.date.slice(0, 10));\n      const maxPrice = Math.max(...closingPrices);\n      const adjustedMaxPrice = maxPrice * 1.35;\n      const minPrice = Math.min(...closingPrices);\n      const margin = {\n        top: 60,\n        right: 20,\n        bottom: 50,\n        left: 50\n      };\n      const width = 600 - margin.left - margin.right;\n      const height = 400 - margin.top - margin.bottom;\n      const buySellPoints = findBuySellPoints(closingPrices);\n      const svg = d3.select('#chart-container').append('svg').attr('width', width + margin.left + margin.right).attr('height', height + margin.top + margin.bottom).append('g').attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n      const parseDate = d3.timeParse('%Y-%m-%d');\n      const x = d3.scaleBand().range([0, width]).padding(0.1);\n      const y = d3.scaleLinear().domain([0, adjustedMaxPrice]).nice().range([height, 0]);\n      const yPlot = d3.scaleLinear().domain([0, maxPrice]).range([height, 0]);\n\n      // const info = closingPrices.map((price, index) => ({ date: `Day ${index + 1}`, price: price }));\n      const dates_prices = dates.map((date, index) => ({\n        date: date,\n        price: closingPrices[index]\n      })).sort((a, b) => new Date(a.date) - new Date(b.date));\n      x.domain(dates_prices.map(d => d.date));\n      y.domain([0, adjustedMaxPrice]);\n      svg.append('g').call(d3.axisLeft(y));\n      svg.append(\"text\").attr(\"transform\", \"rotate(-90)\").attr(\"y\", 0 - margin.left).attr(\"x\", 0 - height / 2).attr(\"dy\", \"1em\").style(\"text-anchor\", \"middle\").text(\"Price ($)\");\n      svg.append('g').attr('class', 'x-axis').attr('transform', 'translate(0,' + height + ')').call(d3.axisBottom(x)).selectAll('.tick text') // Select all x-axis text elements\n      .attr('class', 'x-axis-label').attr('transform', function (d, i) {\n        if (x.domain().length > 15) {\n          // If there are more than 15 dates, display only the first and last labels\n          if (i === 0 || i === x.domain().length - 1) {\n            return 'rotate(-45)';\n          } else {\n            // Hide other labels by making them transparent and setting text-anchor to middle\n            return 'rotate(0)';\n          }\n        } else {\n          // If there are 15 or fewer dates, rotate all labels\n          return 'rotate(-45)';\n        }\n      }).style('text-anchor', function (d, i) {\n        // Align the rotated text to the end for first and last labels; middle for others\n        if (x.domain().length > 15) {\n          if (i === 0 || i === x.domain().length - 1) {\n            return 'end';\n          } else {\n            return 'middle';\n          }\n        } else {\n          return 'end';\n        }\n      }).style('fill-opacity', function (d, i) {\n        // Set fill-opacity to 0 for labels that should be hidden\n        if (x.domain().length > 15) {\n          if (i === 0 || i === x.domain().length - 1) {\n            return 1; // Show first and last labels\n          } else {\n            return 0; // Hide other labels\n          }\n        } else {\n          return 1; // Show all labels if there are 15 or fewer dates\n        }\n      });\n\n      svg.append('text').attr('x', width / 2).attr('y', 0 - margin.top / 2).attr('text-anchor', 'middle').style('font-size', '18px').style('font-weight', 'bold').text(stockTicker.toUpperCase());\n      const line = d3.line().x(d => x(d.date) + x.bandwidth() / 2) // Position the line in the middle of the band\n      .y(d => y(d.price)).curve(d3.curveBasis); // Use curveMonotoneX for smooth interpolation\n\n      svg.append('path').datum(dates_prices).attr('class', 'line').attr('d', line).attr('stroke', 'steelblue') // Set line color\n      .attr('stroke-width', 5) // Set line width\n      .attr('fill', 'none').attr('stroke-dasharray', function () {\n        const totalLength = this.getTotalLength();\n        return totalLength + \" \" + totalLength;\n      }).attr('stroke-dashoffset', function () {\n        return this.getTotalLength();\n      }).transition().duration(2000) // Set transition duration in milliseconds\n      .attr('stroke-dashoffset', 0);\n      const bisect = d3.bisector(d => d.date).left;\n      svg.select('.line').on('mousemove', function (event) {\n        const [mouseX, mouseY] = d3.pointer(event);\n        // Calculate the index of the closest band based on the mouse position\n        const index = Math.floor((mouseX - margin.left) / x.bandwidth());\n        // Ensure the index is within valid bounds\n        const validIndex = Math.max(0, Math.min(index, dates_prices.length - 1));\n        const closestDataPoint = dates_prices[validIndex];\n        const tooltip = d3.select('#tooltip');\n        const offsetX = 100;\n        const offsetY = 150;\n        tooltip.style('left', mouseX + offsetX + 'px').style('top', mouseY + offsetY + 'px').style('opacity', .8).style('box-shadow', '2px 2px 5px rgba(0, 0, 0, 0.5)').html(`Price: $${closestDataPoint.price.toFixed(2)}`);\n        tooltip.transition().duration(200).style('opacity', 1);\n      }).on('mouseout', function (event, d) {\n        // Set a timeout to hide the tooltip after 1000 milliseconds (1 second)\n        tooltip.node().timeout = setTimeout(() => {\n          tooltip.transition().duration(200).style('opacity', 0); // Set final opacity after transition\n        }, 1000);\n      });\n\n      // .on('mouseout', function () {\n      //     d3.select('#tooltip').style('opacity', 0);\n      // });\n\n      let reversed_buySellPoints = buySellPoints.reverse();\n      // Create a transition for the buy circles after the line has been created\n      // Create a transition for the buy circles after the line has been created\n      svg.selectAll('.buy-circle').data(reversed_buySellPoints).enter().append('circle').attr('class', 'buy-circle').attr('r', 0) // Start with radius 0 for initial hidden state\n      .attr('cx', d => x(dates[d.buy.day])).attr('cy', d => y(closingPrices[d.buy.day])).style('fill', '#359d2f').transition() // Apply transition to circles\n      .delay((d, i) => i * 70) // Delay each circle by 500 milliseconds times its index\n      .duration(1000) // Transition duration 1000 milliseconds (or adjust as needed)\n      .attr('r', 2); // End with radius 5 for visible state\n\n      // Create a transition for the sell circles after the buy circles transition is completed\n      svg.selectAll('.sell-circle').data(reversed_buySellPoints).enter().append('circle').attr('class', 'sell-circle').attr('r', 0) // Start with radius 0 for initial hidden state\n      .attr('cx', d => x(dates[d.sell.day])).attr('cy', d => y(closingPrices[d.sell.day])).style('fill', 'red').transition() // Apply transition to circles\n      .delay((d, i) => i * 70) // Delay each circle by 500 milliseconds times its index\n      .duration(1000) // Transition duration 1000 milliseconds (or adjust as needed)\n      .attr('r', 2); // End with radius 5 for visible state\n\n      // Add circles for data points\n      // svg.selectAll('.dot')\n      // .data(dates_prices)\n      // .enter().append('circle')\n      // .attr('class', 'dot')\n      // .attr('cx', d => x(d.date) + x.bandwidth() / 2)\n      // .attr('cy', d => y(d.price))\n      // .attr('r', 0)  // Initial radius set to 0\n      // .transition()\n      // .delay(function(d, i) {\n      //     return i * 100;  // Add delay based on index to transition circles chronologically\n      // })\n      // .duration(500)  // Transition duration in milliseconds\n      // .attr('r', 5)  // Final radius set to 5;\n      // .on('mouseover', function(d) {\n      //     const mousePrice = d.price;\n      //     const tooltip = d3.select('#tooltip');\n      //     tooltip.transition().duration(200).style('opacity', 0.9);\n      //     tooltip.html(`Price: $${mousePrice}`)\n      //         .style('left', d3.event.pageX + 'px')  // Use d3.event.pageX instead of event.pageX\n      //         .style('top', d3.event.pageY - 28 + 'px');  // Use d3.event.pageY instead of event.pageY\n      // })\n\n      // .on('mouseout', function() {\n      //     // Hide tooltip on mouseout\n      //     d3.select('#tooltip').transition().duration(500).style('opacity', 0);\n      // });\n\n      const svgElements = document.querySelectorAll(\"svg\");\n\n      // Iterate over each SVG element and set the height\n      svgElements.forEach(svgElement => {\n        svgElement.style.height = height + margin.top + margin.bottom + 'px'; // Set the height including top and bottom margins\n      });\n\n      //Display max and min prices in the browser\n      const maxPriceElement = document.getElementById('max-price');\n      const minPriceElement = document.getElementById('min-price');\n      // maxPriceElement.textContent = `Maximum Price: $${maxPrice}`;\n      // minPriceElement.textContent = `Minimum Price: $${minPrice}`;\n\n      //Display multiple buy and sell points in the browser\n      const buySellPointsElement = document.getElementById('buy-sell-points');\n      // buySellPointsElement.textContent = `Buy and Sell Points:\\n`;\n      buySellPoints.forEach(_ref => {\n        let {\n          buy,\n          sell\n        } = _ref;\n      } // buySellPointsElement.textContent += `Buy at Day ${buy.day + 1} ($${buy.price.toFixed(2)})\\nSell at Day ${sell.day + 1} ($${sell.price.toFixed(2)})\\n\\n`;\n      );\n\n      //Calculate and display net profit\n      const profitElement = document.getElementById('profit');\n      // profitElement.textContent = \"Net Profit: \";\n      const netProfit = calculateInvestedProfit(investmentAmount, buySellPoints);\n      // profitElement.textContent += `$${netProfit.toFixed(2)}`;\n\n      // Create a new SVG group for the bar plot\n      // const barPlot = svg.append('g').attr('class', 'bar-plot');\n\n      // const barPlot = d3.select('#chart-container')\n      // .append('svg')\n      // .attr('width', width + margin.left + margin.right)\n      // .attr('height', height + margin.top + margin.bottom)\n      // .append('g')\n      // .attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n      // .append('g').attr('class', 'bar-plot');\n\n      // Calculate gross revenue for each buy-sell pair\n      // const grossRevenues = [];\n      // let grossRevenueFromInvestment = investmentAmount;\n      let currentProfit = 0;\n      let profitArray = [];\n      for (let i = 0; i < buySellPoints.length; i++) {\n        // grossRevenueFromInvestment = (grossRevenueFromInvestment / buySellPoints[i].buy.price) * buySellPoints[i].sell.price;\n        // grossRevenues.push(grossRevenueFromInvestment);\n        currentProfit += buySellPoints[i].sell.price - buySellPoints[i].buy.price;\n        profitArray.push(currentProfit);\n        profitArray[i] *= final_num_shares;\n      }\n\n      // const formattedDates = {\n\n      //     for (let i=0; i<buySellPoints.length; i++) {\n      //         const buyDate = dates[buySellPoints.buy.day[i]-1];\n      //         const sellDate = dates[buySellPoints.sell.day[i]-1];\n      //         return `Buy: ${buyDate}, Sell: ${sellDate}`;\n\n      //     }\n      // const buyDate = dates[point.buy.day];\n      // const sellDate = dates[point.sell.day];\n      // return `Buy: ${buyDate}, Sell: ${sellDate}`;\n\n      // dates = buySellPoints.buy.day[i], buySellPoints.sell.day[i]\n\n      // };\n\n      const formattedDates = [];\n      for (let i = 0; i < buySellPoints.length; i++) {\n        // const buyDate = dates_prices[buySellPoints[i].buy.day - 1].date;\n        const buyDate = dates_prices[buySellPoints[i].buy.day].date;\n        // const sellDate = dates_prices[buySellPoints[i].sell.day - 1].date;\n        const sellDate = dates_prices[buySellPoints[i].sell.day].date;\n        formattedDates.push(`Buy: ${buyDate}, Sell: ${sellDate}`);\n      }\n\n      // Define X and Y scales for the bar plot\n      // const xBarScale = d3.scaleBand().range([0, width]).padding(0.1);\n      // const yBarScale = d3.scaleLinear().domain([0, d3.max(profitArray)]).nice().range([height, 0]);\n\n      // const yBarScale = d3.scaleLinear().domain([0, (Math.max(...profitArray) * 1.25)]).nice().range([height, 0]);\n\n      // // Add bars to the bar plot\n      // barPlot.selectAll('.bar')\n      // .data(profitArray)\n      // .enter().append('rect')\n      // .attr('class', 'bar')\n      // .attr('x', (d, i) => xBarScale(i))\n      // .attr('y', d => yBarScale(d))\n      // // .attr('width', xBarScale.bandwidth())\n      // // .attr('height', d => height - yBarScale(d))\n      // .attr('fill', 'steelblue')\n      // .attr('data-index', (d, i) => i)\n      // .on('mouseover', function(event) {\n      //     const index = d3.select(this).attr('data-index');\n      //     const tooltip = d3.select('#tooltip');\n      //     tooltip.transition().duration(200).style('opacity', 0.9);\n      //     tooltip.html(`Trade Dates: ${formattedDates[index]}`)\n      //         .style('left', event.pageX + 'px')\n      //         .style('top', event.pageY - 28 + 'px');\n      // })\n      // .on('mouseout', function() {\n      //     d3.select('#tooltip').transition().duration(500).style('opacity', 0);\n      // });\n\n      // // Add labels for X and Y axes of the bar plot\n      // const xAxis = d3.axisBottom(xBarScale);\n      // // const yAxis = d3.axisLeft(yBarScale);\n      // const yAxis = d3.axisLeft(yBarScale)\n      // .tickFormat(d3.format('$,'));\n\n      // barPlot.append('g')\n      // .attr('class', 'x-axis')\n      // // .attr('transform', 'translate(0,' + height + ')')\n      // .call(xAxis);\n\n      // barPlot.append('g')\n      // .attr('class', 'y-axis')\n      // .call(yAxis);\n\n      // .call(d3.axisBottom(xBarScale)\n      //     .tickFormat((d, i) => `Trade ${i + 1}`)\n      // );\n\n      // barPlot.append(\"text\")\n      //     .attr('class', 'y-axis-label')\n      //     .attr(\"transform\", \"rotate(-90)\")\n      //     .attr(\"y\", 0 - margin.left)\n      //     .attr(\"x\", 0 - (height / 2))\n      //     .attr(\"dy\", \"1em\")\n      //     .style(\"text-anchor\", \"middle\")\n      //     .text(\"Net accumulating profit ($)\")\n      //     .attr('class', 'chart-title')\n      //     .attr('x', width / 2)\n      //     .attr('y', 0 - margin.top / 2)\n      //     .attr('text-anchor', 'middle')\n      //     .style('font-size', '18px')\n      //     .text('Net accumulating profit ($)');\n\n      // Set the dimensions of the canvas\n      var bpmargin = {\n        top: 60,\n        right: 20,\n        bottom: 50,\n        left: 50\n      };\n      var bpwidth = 600 - bpmargin.left - bpmargin.right;\n      var bpheight = 400 - bpmargin.top - bpmargin.bottom;\n\n      // Create an SVG element and append it to the body\n      var bpsvg = d3.select(\"#chart-container\").append(\"svg\").style(\"overflow\", \"visible\").attr(\"width\", bpwidth + bpmargin.left + bpmargin.right).attr(\"height\", bpheight + bpmargin.top + bpmargin.bottom).append(\"g\").attr(\"transform\", \"translate(\" + bpmargin.left + \",\" + bpmargin.top + \")\");\n\n      // Create x and y scales\n      var bpx = d3.scaleBand().domain(d3.range(profitArray.length)).range([0, width]).padding(0.1);\n      var bpy = d3.scaleLinear().domain([0, d3.max(profitArray)]).nice().range([height, 0]);\n\n      // Create bars\n      bpsvg.selectAll(\".bar\").data(profitArray).enter().append(\"rect\").attr(\"class\", \"bar\").attr(\"class\", \"bar bar-transition\").attr(\"data-index\", function (d, i) {\n        return i;\n      }) // Set data-index attribute\n      .attr(\"x\", function (d, i) {\n        return bpx(i);\n      }).attr(\"width\", bpx.bandwidth()).attr(\"y\", function (d) {\n        return bpy(d);\n      }).attr(\"height\", function (d) {\n        return height - bpy(d);\n      }).on('mouseover', function (event) {\n        const index = d3.select(this).attr('data-index');\n        const tooltip = d3.select('#tooltip');\n        tooltip.transition().duration(200).style('opacity', 0.8);\n        tooltip.html(`Trade Dates: ${formattedDates[index]}`).style('left', event.pageX + 'px').style('top', event.pageY - 28 + 'px');\n      }).on('mouseout', function () {\n        d3.select('#tooltip').transition().duration(500).style('opacity', 0);\n      });\n\n      // Apply transition effect only to bars with the class 'bar-transition'\n      bpsvg.selectAll(\".bar-transition\").transition() // Apply transition effect\n      .duration(1000) // Set the duration of the transition in milliseconds\n      .attr(\"y\", function (d) {\n        return bpy(d);\n      }).attr(\"height\", function (d) {\n        return height - bpy(d);\n      });\n\n      // Create x-axis\n      bpsvg.append(\"g\").attr(\"class\", \"x-axis\").attr(\"transform\", \"translate(0,\" + height + \")\").call(d3.axisBottom(bpx).tickSize(0).tickFormat(\"\"));\n\n      // Create y-axis\n      bpsvg.append(\"g\").attr(\"class\", \"y-axis\").call(d3.axisLeft(bpy)).append(\"text\").attr(\"transform\", \"rotate(-90)\").attr(\"y\", 0 - bpmargin.left).attr(\"x\", 0 - bpheight / 2).attr(\"dy\", \".5em\").style(\"text-anchor\", \"middle\").style(\"fill\", \"black\").style(\"font-size\", \"16px\").text(\"Accumulated Profit ($)\");\n      bpsvg.append('text').attr('x', width / 2).attr('y', 0 - margin.top / 2).attr('text-anchor', 'middle').style('font-size', '18px').style('font-weight', 'bold').text(\"Net Accumulated Profit\");\n\n      // const bpElements = document.querySelectorAll(\"svg\");\n\n      // // Iterate over each SVG element and set the height\n      // bpElements.forEach(svgElement => {\n      //     svgElement.style.height = bpheight + bpmargin.top + bpmargin.bottom + 'px'; // Set the height including top and bottom margins\n      // });\n    }).catch(error => {\n      console.error('Error:', error);\n    });\n  }\n  const handletickerSubmit = e => {\n    e.preventDefault();\n    stockButtons.forEach(button => {\n      button.classList.remove(\"hide\");\n    });\n    const tickerInput = document.querySelector(\".ticker-input\");\n    const dateInput = document.querySelector(\".date-input\");\n    const investmentInput = document.querySelector(\".investment-input\");\n    let stockTicker = tickerInput.value;\n    selectedDate = dateInput.value;\n    investmentAmount = parseFloat(investmentInput.value);\n    currentDate = new Date().toISOString().split('T')[0];\n    createGraph(stockTicker, selectedDate, currentDate, investmentAmount);\n  };\n  const listSubmitButton = document.querySelector(\".ticker-submit\");\n  listSubmitButton.addEventListener(\"click\", handletickerSubmit);\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/index.js\n");

/***/ }),

/***/ "./src/index.scss":
/*!************************!*\
  !*** ./src/index.scss ***!
  \************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaW5kZXguc2NzcyIsIm1hcHBpbmdzIjoiO0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdG9jay1hcHAvLi9zcmMvaW5kZXguc2Nzcz85NzQ1Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuZXhwb3J0IHt9OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/index.scss\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	!function() {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = function(exports) {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	}();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	__webpack_modules__["./src/index.js"](0, {}, __webpack_require__);
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/index.scss"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ })()
;