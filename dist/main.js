/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (function() {

eval("document.addEventListener(\"DOMContentLoaded\", () => {\n  let selectedDate;\n  let investmentAmount;\n  let currentDate = new Date().toISOString().split('T')[0];\n  const stockButtons = document.querySelectorAll(\".button-container button\");\n  stockButtons.forEach(button => {\n    button.classList.add(\"hide\"); // Initially hide all stock buttons\n  });\n\n  createGraph(\"GOOGL\", \"2023-01-01\", currentDate, 5000);\n\n  // createEmptyGraph();\n\n  // function createEmptyGraph() {\n  //     const margin = { top: 20, right: 20, bottom: 30, left: 50 };\n  //     const width = 600 - margin.left - margin.right;\n  //     const height = 400 - margin.top - margin.bottom;\n\n  //     const svg = d3.select('#chart-container')\n  //         .append('svg')\n  //         .attr('width', width + margin.left + margin.right)\n  //         .attr('height', height + margin.top + margin.bottom)\n  //         .append('g')\n  //         .attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n  //     // Define X and Y scales\n  //     const xScale = d3.scaleBand().range([0, width]).padding(0.1);\n  //     const yScale = d3.scaleLinear().range([height, 0]);\n\n  //     // Add X and Y axis elements\n  //     const xAxis = d3.axisBottom(xScale);\n  //     const yAxis = d3.axisLeft(yScale);\n\n  //     // Append X and Y axes to the graph\n  //     svg.append('g')\n  //         .attr('class', 'x-axis')\n  //         .attr('transform', 'translate(0,' + height + ')')\n  //         .call(xAxis);\n\n  //     svg.append('g')\n  //         .attr('class', 'y-axis')\n  //         .call(yAxis);\n\n  //     // Add labels for X and Y axes (if needed)\n  //     svg.append('text')\n  //         .attr('transform', 'translate(' + (width / 2) + ' ,' + (height + margin.top + 20) + ')')\n  //         .style('text-anchor', 'middle')\n  //         .text('Date');\n\n  //     svg.append('text')\n  //         .attr('transform', 'rotate(-90)')\n  //         .attr('y', 0 - margin.left)\n  //         .attr('x', 0 - (height / 2))\n  //         .attr('dy', '1em')\n  //         .style('text-anchor', 'middle')\n  //         .text('Price ($)');\n\n  //     const svgElements = document.querySelectorAll(\"svg\");\n\n  //     // Iterate over each SVG element and set the height\n  //     svgElements.forEach(svgElement => {\n  //         svgElement.style.height = \"500px\";\n  //     });\n  // }\n\n  const findBuySellPoints = prices => {\n    let n = prices.length;\n    let buySellPoints = [];\n    let i = 0;\n    while (i < n - 1) {\n      // Find local minima as potential buy point\n      while (i < n - 1 && prices[i] >= prices[i + 1]) {\n        i++;\n      }\n      if (i === n - 1) {\n        break;\n      }\n      let buy = i;\n\n      // Find local maxima as potential sell point\n      while (i < n - 1 && prices[i] <= prices[i + 1]) {\n        i++;\n      }\n      let sell = i;\n\n      // Add buy and sell points to the result array\n      buySellPoints.push({\n        buy: {\n          day: buy,\n          price: prices[buy]\n        },\n        sell: {\n          day: sell,\n          price: prices[sell]\n        }\n      });\n    }\n    return buySellPoints;\n  };\n  const calculateInvestedProfit = (investmentAmount, buySellPoints) => {\n    let grossRevenueFromInvestment = investmentAmount;\n    let numShares = 0;\n    let netProfit;\n    for (let a = 0; a < buySellPoints.length; a++) {\n      numShares = grossRevenueFromInvestment / buySellPoints[a].buy.price;\n      grossRevenueFromInvestment = numShares * buySellPoints[a].sell.price;\n    }\n    netProfit = grossRevenueFromInvestment - investmentAmount;\n    return netProfit;\n  };\n  var appleStock = document.getElementById(\"apple\");\n  appleStock.addEventListener(\"click\", function () {\n    createGraph(\"AAPL\", selectedDate, currentDate, investmentAmount);\n  });\n  var msftStock = document.getElementById(\"microsoft\");\n  msftStock.addEventListener(\"click\", function () {\n    createGraph(\"MSFT\", selectedDate, currentDate, investmentAmount);\n  });\n  var pltrStock = document.getElementById(\"palantir\");\n  pltrStock.addEventListener(\"click\", function () {\n    createGraph(\"PLTR\", selectedDate, currentDate, investmentAmount);\n  });\n  var tslaStock = document.getElementById(\"tesla\");\n  tslaStock.addEventListener(\"click\", function () {\n    createGraph(\"TSLA\", selectedDate, currentDate, investmentAmount);\n  });\n  function createGraph(stockTicker, selectedDate, currentDate, investmentAmount) {\n    const existingGraph = document.querySelector('#chart-container svg:nth-child(2)');\n    const svg = d3.select('#chart-container svg');\n    svg.selectAll('*').remove();\n    if (existingGraph) {\n      existingGraph.remove();\n    }\n    fetch(`http://api.marketstack.com/v1/eod?access_key=f45d23e96f5b1cceed74bcf23257fdac&symbols=${stockTicker}&date_from=${selectedDate}&date_to=${currentDate}`).then(response => response.json()).then(data => {\n      const closingPrices = data.data.map(day => day.close);\n      const dates = data.data.map(date => date.date.slice(0, 10));\n      const maxPrice = Math.max(...closingPrices);\n      // const adjustedMaxPrice = maxPrice * 1.25; // Adjust the maximum price by 25%\n      const minPrice = Math.min(...closingPrices);\n      const margin = {\n        top: 60,\n        right: 20,\n        bottom: 50,\n        left: 50\n      };\n      const width = 600 - margin.left - margin.right;\n      const height = 400 - margin.top - margin.bottom;\n      const buySellPoints = findBuySellPoints(closingPrices);\n      const svg = d3.select('#chart-container').append('svg').attr('width', width + margin.left + margin.right).attr('height', height + margin.top + margin.bottom).append('g').attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n      const parseDate = d3.timeParse('%Y-%m-%d');\n      const x = d3.scaleBand().range([0, width]).padding(0.1);\n      const y = d3.scaleLinear().range([height, 0]);\n      // const y = d3.scaleLinear().domain([0, adjustedMaxPrice]).nice().range([height, 0]);\n\n      // const info = closingPrices.map((price, index) => ({ date: `Day ${index + 1}`, price: price }));\n      const dates_prices = dates.map((date, index) => ({\n        date: date,\n        price: closingPrices[index]\n      }));\n      x.domain(dates_prices.map(d => d.date));\n      y.domain([0, d3.max(dates_prices, d => d.price)]);\n      svg.append('g').call(d3.axisLeft(y));\n      svg.append(\"text\").attr(\"transform\", \"rotate(-90)\").attr(\"y\", 0 - margin.left).attr(\"x\", 0 - height / 2).attr(\"dy\", \"1em\").style(\"text-anchor\", \"middle\").text(\"Price ($)\");\n      svg.append('g').attr('class', 'x-axis').attr('transform', 'translate(0,' + height + ')').call(d3.axisBottom(x)).selectAll('.tick text') // Select all x-axis text elements\n      .attr('class', 'x-axis-label').attr('transform', function (d, i) {\n        if (x.domain().length > 15) {\n          // If there are more than 15 dates, display only the first and last labels\n          if (i === 0 || i === x.domain().length - 1) {\n            return 'rotate(-45)';\n          } else {\n            // Hide other labels by making them transparent and setting text-anchor to middle\n            return 'rotate(0)';\n          }\n        } else {\n          // If there are 15 or fewer dates, rotate all labels\n          return 'rotate(-45)';\n        }\n      }).style('text-anchor', function (d, i) {\n        // Align the rotated text to the end for first and last labels; middle for others\n        if (x.domain().length > 15) {\n          if (i === 0 || i === x.domain().length - 1) {\n            return 'end';\n          } else {\n            return 'middle';\n          }\n        } else {\n          return 'end';\n        }\n      }).style('fill-opacity', function (d, i) {\n        // Set fill-opacity to 0 for labels that should be hidden\n        if (x.domain().length > 15) {\n          if (i === 0 || i === x.domain().length - 1) {\n            return 1; // Show first and last labels\n          } else {\n            return 0; // Hide other labels\n          }\n        } else {\n          return 1; // Show all labels if there are 15 or fewer dates\n        }\n      });\n\n      svg.append('text').attr('x', width / 2).attr('y', 0 - margin.top / 2).attr('text-anchor', 'middle').style('font-size', '18px').style('font-weight', 'bold').text(stockTicker);\n      const line = d3.line().x(d => x(d.date) + x.bandwidth() / 2) // Position the line in the middle of the band\n      .y(d => y(d.price));\n      svg.append('path').datum(dates_prices).attr('class', 'line').attr('d', line).attr('stroke-dasharray', function () {\n        const totalLength = this.getTotalLength();\n        return totalLength + \" \" + totalLength;\n      }).attr('stroke-dashoffset', function () {\n        return this.getTotalLength();\n      }).transition().duration(2000) // Set transition duration in milliseconds\n      .attr('stroke-dashoffset', 0);\n      const bisect = d3.bisector(d => d.date).left; // Create a bisector to find the closest data point\n\n      svg.select('.line').on('mousemove', function (event) {\n        const [mouseX, mouseY] = d3.pointer(event);\n        const index = bisect(dates_prices, mouseX - margin.left, 1);\n        const closestDataPoint = dates_prices[index];\n        const tooltip = d3.select('#tooltip');\n        const offsetX = 400;\n        const offsetY = 140;\n        tooltip.style('left', mouseX + offsetX + 'px').style('top', mouseY + offsetY + 'px').style('opacity', 1).html(`Price: $${closestDataPoint.price.toFixed(2)}`);\n      }).on('mouseout', function () {\n        d3.select('#tooltip').style('opacity', 0);\n      });\n\n      //Add circles for buy points\n      // svg.selectAll('.buy-circle')\n      //     .data(buySellPoints)\n      //     .enter().append('circle')\n      //     .attr('class', 'buy-circle')\n      //     .attr('cx', d => x(`Day ${d.buy.day + 1}`) + x.bandwidth() / 2) // Access the correct date from info array\n      //     .attr('cy', d => y(closingPrices[d.buy.day]))\n      //     .attr('r', 5)\n      //     .style('fill', 'green')\n\n      //Add circles for sell points\n      // svg.selectAll('.sell-circle')\n      //     .data(buySellPoints)\n      //     .enter().append('circle')\n      //     .attr('class', 'sell-circle')\n      //     .attr('cx', d => x(`Day ${d.sell.day + 1}`) + x.bandwidth() / 2) // Access the correct date from info array\n      //     .attr('cy', d => y(closingPrices[d.sell.day]))\n      //     .attr('r', 5)\n      //     .style('fill', 'red')\n\n      // Add circles for data points\n      // svg.selectAll('.dot')\n      // .data(dates_prices)\n      // .enter().append('circle')\n      // .attr('class', 'dot')\n      // .attr('cx', d => x(d.date) + x.bandwidth() / 2)\n      // .attr('cy', d => y(d.price))\n      // .attr('r', 0)  // Initial radius set to 0\n      // .transition()\n      // .delay(function(d, i) {\n      //     return i * 100;  // Add delay based on index to transition circles chronologically\n      // })\n      // .duration(500)  // Transition duration in milliseconds\n      // .attr('r', 5)  // Final radius set to 5;\n      // .on('mouseover', function(d) {\n      //     const mousePrice = d.price;\n      //     const tooltip = d3.select('#tooltip');\n      //     tooltip.transition().duration(200).style('opacity', 0.9);\n      //     tooltip.html(`Price: $${mousePrice}`)\n      //         .style('left', d3.event.pageX + 'px')  // Use d3.event.pageX instead of event.pageX\n      //         .style('top', d3.event.pageY - 28 + 'px');  // Use d3.event.pageY instead of event.pageY\n      // })\n\n      // .on('mouseout', function() {\n      //     // Hide tooltip on mouseout\n      //     d3.select('#tooltip').transition().duration(500).style('opacity', 0);\n      // });\n\n      const svgElements = document.querySelectorAll(\"svg\");\n\n      // Iterate over each SVG element and set the height\n      svgElements.forEach(svgElement => {\n        svgElement.style.height = height + margin.top + margin.bottom + 'px'; // Set the height including top and bottom margins\n      });\n\n      //Display max and min prices in the browser\n      const maxPriceElement = document.getElementById('max-price');\n      const minPriceElement = document.getElementById('min-price');\n      maxPriceElement.textContent = `Maximum Price: $${maxPrice}`;\n      minPriceElement.textContent = `Minimum Price: $${minPrice}`;\n\n      //Display multiple buy and sell points in the browser\n      const buySellPointsElement = document.getElementById('buy-sell-points');\n      buySellPointsElement.textContent = `Buy and Sell Points:\\n`;\n      buySellPoints.forEach(_ref => {\n        let {\n          buy,\n          sell\n        } = _ref;\n        buySellPointsElement.textContent += `Buy at Day ${buy.day + 1} ($${buy.price.toFixed(2)})\\nSell at Day ${sell.day + 1} ($${sell.price.toFixed(2)})\\n\\n`;\n      });\n\n      //Calculate and display net profit\n      const profitElement = document.getElementById('profit');\n      profitElement.textContent = \"Net Profit: \";\n      const netProfit = calculateInvestedProfit(investmentAmount, buySellPoints);\n      profitElement.textContent += `$${netProfit.toFixed(2)}`;\n    }).catch(error => {\n      console.error('Error:', error);\n    });\n  }\n  const handletickerSubmit = e => {\n    e.preventDefault();\n    stockButtons.forEach(button => {\n      button.classList.remove(\"hide\");\n    });\n    const tickerInput = document.querySelector(\".ticker-input\");\n    const dateInput = document.querySelector(\".date-input\");\n    const investmentInput = document.querySelector(\".investment-input\");\n    let stockTicker = tickerInput.value;\n    selectedDate = dateInput.value;\n    investmentAmount = parseFloat(investmentInput.value);\n    currentDate = new Date().toISOString().split('T')[0];\n    createGraph(stockTicker, selectedDate, currentDate, investmentAmount);\n  };\n  const listSubmitButton = document.querySelector(\".ticker-submit\");\n  listSubmitButton.addEventListener(\"click\", handletickerSubmit);\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/index.js\n");

/***/ }),

/***/ "./src/index.scss":
/*!************************!*\
  !*** ./src/index.scss ***!
  \************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaW5kZXguc2NzcyIsIm1hcHBpbmdzIjoiO0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdG9jay1hcHAvLi9zcmMvaW5kZXguc2Nzcz85NzQ1Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuZXhwb3J0IHt9OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/index.scss\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	!function() {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = function(exports) {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	}();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	__webpack_modules__["./src/index.js"](0, {}, __webpack_require__);
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/index.scss"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ })()
;