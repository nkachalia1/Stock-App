/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (function() {

eval("document.addEventListener(\"DOMContentLoaded\", () => {\n  let selectedDate;\n  let investmentAmount;\n  let currentDate;\n  const findBuySellPoints = prices => {\n    let n = prices.length;\n    let buySellPoints = [];\n    let i = 0;\n    while (i < n - 1) {\n      // Find local minima as potential buy point\n      while (i < n - 1 && prices[i] >= prices[i + 1]) {\n        i++;\n      }\n      if (i === n - 1) {\n        break;\n      }\n      let buy = i;\n\n      // Find local maxima as potential sell point\n      while (i < n - 1 && prices[i] <= prices[i + 1]) {\n        i++;\n      }\n      let sell = i;\n\n      // Add buy and sell points to the result array\n      buySellPoints.push({\n        buy: {\n          day: buy,\n          price: prices[buy]\n        },\n        sell: {\n          day: sell,\n          price: prices[sell]\n        }\n      });\n    }\n    return buySellPoints;\n  };\n  const calculateInvestedProfit = (investmentAmount, buySellPoints) => {\n    let grossRevenueFromInvestment = investmentAmount;\n    let numShares = 0;\n    let netProfit;\n    for (let a = 0; a < buySellPoints.length; a++) {\n      numShares = grossRevenueFromInvestment / buySellPoints[a].buy.price;\n      grossRevenueFromInvestment = numShares * buySellPoints[a].sell.price;\n    }\n    netProfit = grossRevenueFromInvestment - investmentAmount;\n    return netProfit;\n  };\n  var appleStock = document.getElementById(\"apple\");\n  appleStock.addEventListener(\"click\", function () {\n    createGraph(\"AAPL\", selectedDate, currentDate, investmentAmount);\n  });\n  var msftStock = document.getElementById(\"microsoft\");\n  msftStock.addEventListener(\"click\", function () {\n    createGraph(\"MSFT\", selectedDate, currentDate, investmentAmount);\n  });\n  var pltrStock = document.getElementById(\"palantir\");\n  pltrStock.addEventListener(\"click\", function () {\n    createGraph(\"PLTR\", selectedDate, currentDate, investmentAmount);\n  });\n  var tslaStock = document.getElementById(\"tesla\");\n  tslaStock.addEventListener(\"click\", function () {\n    createGraph(\"TSLA\", selectedDate, currentDate, investmentAmount);\n  });\n  function createGraph(stockTicker, selectedDate, currentDate, investmentAmount) {\n    fetch(`http://api.marketstack.com/v1/eod?access_key=f45d23e96f5b1cceed74bcf23257fdac&symbols=${stockTicker}&date_from=${selectedDate}&date_to=${currentDate}`).then(response => response.json()).then(data => {\n      const closingPrices = data.data.map(day => day.close);\n      const maxPrice = Math.max(...closingPrices);\n      const minPrice = Math.min(...closingPrices);\n      const margin = {\n        top: 20,\n        right: 20,\n        bottom: 30,\n        left: 50\n      };\n      const width = 600 - margin.left - margin.right;\n      const height = 400 - margin.top - margin.bottom;\n      const buySellPoints = findBuySellPoints(closingPrices);\n\n      //Build the line graph\n      const svg = d3.select('#chart-container').append('svg').attr('width', width + margin.left + margin.right).attr('height', height + margin.top + margin.bottom).append('g').attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n      const parseDate = d3.timeParse('%Y-%m-%d');\n      const x = d3.scaleBand().range([0, width]).padding(0.1);\n      const y = d3.scaleLinear().range([height, 0]);\n      const info = closingPrices.map((price, index) => ({\n        date: `Day ${index + 1}`,\n        price: price\n      }));\n      x.domain(info.map(d => d.date));\n      y.domain([0, d3.max(info, d => d.price)]);\n      svg.append('g').attr('transform', 'translate(0,' + height + ')').call(d3.axisBottom(x));\n      svg.append('g').call(d3.axisLeft(y));\n      const line = d3.line().x(d => x(d.date) + x.bandwidth() / 2) // Position the line in the middle of the band\n      .y(d => y(d.price));\n      svg.append('path').datum(info).attr('class', 'line').attr('d', line);\n\n      //Add circles for buy points\n      svg.selectAll('.buy-circle').data(buySellPoints).enter().append('circle').attr('class', 'buy-circle').attr('cx', d => x(`Day ${d.buy.day + 1}`) + x.bandwidth() / 2) // Access the correct date from info array\n      .attr('cy', d => y(closingPrices[d.buy.day])).attr('r', 5).style('fill', 'green');\n\n      //Add circles for sell points\n      svg.selectAll('.sell-circle').data(buySellPoints).enter().append('circle').attr('class', 'sell-circle').attr('cx', d => x(`Day ${d.sell.day + 1}`) + x.bandwidth() / 2) // Access the correct date from info array\n      .attr('cy', d => y(closingPrices[d.sell.day])).attr('r', 5).style('fill', 'red');\n\n      // Add circles for data points\n      svg.selectAll('.dot').data(info).enter().append('circle').attr('class', 'dot').attr('cx', d => x(d.date) + x.bandwidth() / 2).attr('cy', d => y(d.price)).attr('r', 5).on('mouseover', function (d) {\n        const mousePrice = d.price;\n        const tooltip = d3.select('#tooltip');\n        tooltip.transition().duration(200).style('opacity', 0.9);\n        tooltip.html(`Price: $${mousePrice}`).style('left', event.pageX + 'px').style('top', event.pageY - 28 + 'px');\n      }).on('mouseout', function () {\n        // Hide tooltip on mouseout\n        d3.select('#tooltip').transition().duration(500).style('opacity', 0);\n      });\n\n      //Display max and min prices in the browser\n      const maxPriceElement = document.getElementById('max-price');\n      const minPriceElement = document.getElementById('min-price');\n      maxPriceElement.textContent = `Maximum Price: $${maxPrice}`;\n      minPriceElement.textContent = `Minimum Price: $${minPrice}`;\n\n      //Display multiple buy and sell points in the browser\n      const buySellPointsElement = document.getElementById('buy-sell-points');\n      buySellPointsElement.textContent = `Buy and Sell Points:\\n`;\n      buySellPoints.forEach(_ref => {\n        let {\n          buy,\n          sell\n        } = _ref;\n        buySellPointsElement.textContent += `Buy at Day ${buy.day + 1} ($${buy.price.toFixed(2)})\\nSell at Day ${sell.day + 1} ($${sell.price.toFixed(2)})\\n\\n`;\n      });\n\n      //Calculate and display net profit\n      const profitElement = document.getElementById('profit');\n      profitElement.textContent = \"Net Profit: \";\n      const netProfit = calculateInvestedProfit(investmentAmount, buySellPoints);\n      profitElement.textContent += `$${netProfit.toFixed(2)}`;\n    }).catch(error => {\n      console.error('Error:', error);\n    });\n  }\n  const handletickerSubmit = e => {\n    e.preventDefault();\n    const tickerInput = document.querySelector(\".ticker-input\");\n    const dateInput = document.querySelector(\".date-input\");\n    const investmentInput = document.querySelector(\".investment-input\");\n    let stockTicker = tickerInput.value;\n    selectedDate = dateInput.value;\n    investmentAmount = parseFloat(investmentInput.value);\n    currentDate = new Date().toISOString().split('T')[0];\n    createGraph(stockTicker, selectedDate, currentDate, investmentAmount);\n  };\n  const listSubmitButton = document.querySelector(\".ticker-submit\");\n  listSubmitButton.addEventListener(\"click\", handletickerSubmit);\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/index.js\n");

/***/ }),

/***/ "./src/index.scss":
/*!************************!*\
  !*** ./src/index.scss ***!
  \************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaW5kZXguc2NzcyIsIm1hcHBpbmdzIjoiO0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdG9jay1hcHAvLi9zcmMvaW5kZXguc2Nzcz85NzQ1Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuZXhwb3J0IHt9OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/index.scss\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	!function() {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = function(exports) {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	}();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	__webpack_modules__["./src/index.js"](0, {}, __webpack_require__);
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/index.scss"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ })()
;