/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (function() {

eval("document.addEventListener(\"DOMContentLoaded\", () => {\n  let selectedDate;\n  let investmentAmount;\n  let currentDate = new Date().toISOString().split('T')[0];\n  const stockButtons = document.querySelectorAll(\".button-container button\");\n  stockButtons.forEach(button => {\n    button.classList.add(\"hide\"); // Initially hide all stock buttons\n  });\n\n  createGraph(\"GOOGL\", \"2023-01-01\", currentDate, 5000);\n\n  // createEmptyGraph();\n\n  // function createEmptyGraph() {\n  //     const margin = { top: 20, right: 20, bottom: 30, left: 50 };\n  //     const width = 600 - margin.left - margin.right;\n  //     const height = 400 - margin.top - margin.bottom;\n\n  //     const svg = d3.select('#chart-container')\n  //         .append('svg')\n  //         .attr('width', width + margin.left + margin.right)\n  //         .attr('height', height + margin.top + margin.bottom)\n  //         .append('g')\n  //         .attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n  //     // Define X and Y scales\n  //     const xScale = d3.scaleBand().range([0, width]).padding(0.1);\n  //     const yScale = d3.scaleLinear().range([height, 0]);\n\n  //     // Add X and Y axis elements\n  //     const xAxis = d3.axisBottom(xScale);\n  //     const yAxis = d3.axisLeft(yScale);\n\n  //     // Append X and Y axes to the graph\n  //     svg.append('g')\n  //         .attr('class', 'x-axis')\n  //         .attr('transform', 'translate(0,' + height + ')')\n  //         .call(xAxis);\n\n  //     svg.append('g')\n  //         .attr('class', 'y-axis')\n  //         .call(yAxis);\n\n  //     // Add labels for X and Y axes (if needed)\n  //     svg.append('text')\n  //         .attr('transform', 'translate(' + (width / 2) + ' ,' + (height + margin.top + 20) + ')')\n  //         .style('text-anchor', 'middle')\n  //         .text('Date');\n\n  //     svg.append('text')\n  //         .attr('transform', 'rotate(-90)')\n  //         .attr('y', 0 - margin.left)\n  //         .attr('x', 0 - (height / 2))\n  //         .attr('dy', '1em')\n  //         .style('text-anchor', 'middle')\n  //         .text('Price ($)');\n\n  //     const svgElements = document.querySelectorAll(\"svg\");\n\n  //     // Iterate over each SVG element and set the height\n  //     svgElements.forEach(svgElement => {\n  //         svgElement.style.height = \"500px\";\n  //     });\n  // }\n\n  const findBuySellPoints = prices => {\n    let n = prices.length;\n    let buySellPoints = [];\n    let i = 0;\n    while (i < n - 1) {\n      // Find local minima as potential buy point\n      while (i < n - 1 && prices[i] >= prices[i + 1]) {\n        i++;\n      }\n      if (i === n - 1) {\n        break;\n      }\n      let buy = i;\n\n      // Find local maxima as potential sell point\n      while (i < n - 1 && prices[i] <= prices[i + 1]) {\n        i++;\n      }\n      let sell = i;\n\n      // Add buy and sell points to the result array\n      buySellPoints.push({\n        buy: {\n          day: buy,\n          price: prices[buy]\n        },\n        sell: {\n          day: sell,\n          price: prices[sell]\n        }\n      });\n    }\n    return buySellPoints;\n  };\n  const calculateInvestedProfit = (investmentAmount, buySellPoints) => {\n    let grossRevenueFromInvestment = investmentAmount;\n    let numShares = 0;\n    let netProfit;\n    for (let a = 0; a < buySellPoints.length; a++) {\n      numShares = grossRevenueFromInvestment / buySellPoints[a].buy.price;\n      grossRevenueFromInvestment = numShares * buySellPoints[a].sell.price;\n    }\n    netProfit = grossRevenueFromInvestment - investmentAmount;\n    return netProfit;\n  };\n  var appleStock = document.getElementById(\"apple\");\n  appleStock.addEventListener(\"click\", function () {\n    createGraph(\"AAPL\", selectedDate, currentDate, investmentAmount);\n  });\n  var msftStock = document.getElementById(\"microsoft\");\n  msftStock.addEventListener(\"click\", function () {\n    createGraph(\"MSFT\", selectedDate, currentDate, investmentAmount);\n  });\n  var pltrStock = document.getElementById(\"palantir\");\n  pltrStock.addEventListener(\"click\", function () {\n    createGraph(\"PLTR\", selectedDate, currentDate, investmentAmount);\n  });\n  var tslaStock = document.getElementById(\"tesla\");\n  tslaStock.addEventListener(\"click\", function () {\n    createGraph(\"TSLA\", selectedDate, currentDate, investmentAmount);\n  });\n  function removeExistingGraph() {\n    const existingGraph = document.querySelector('#chart-container svg');\n    if (existingGraph) {\n      existingGraph.remove();\n    }\n  }\n  function createGraph(stockTicker, selectedDate, currentDate, investmentAmount) {\n    // const existingGraph = document.querySelector('#chart-container svg:nth-child(2)');\n    // const svg = d3.select('#chart-container svg');\n    // svg.selectAll('*').remove();\n    // if (existingGraph) {\n    //     existingGraph.remove();\n    // }\n\n    removeExistingGraph();\n    fetch(`http://api.marketstack.com/v1/eod?access_key=a102fb3f246cfc748eabb0cbafd35e2b&symbols=${stockTicker}&date_from=${selectedDate}&date_to=${currentDate}`).then(response => response.json()).then(data => {\n      const closingPrices = data.data.map(day => day.close);\n      const dates = data.data.map(date => date.date.slice(0, 10));\n      const maxPrice = Math.max(...closingPrices);\n      const adjustedMaxPrice = maxPrice * 1.35;\n      const minPrice = Math.min(...closingPrices);\n      const margin = {\n        top: 60,\n        right: 20,\n        bottom: 50,\n        left: 50\n      };\n      const width = 600 - margin.left - margin.right;\n      const height = 400 - margin.top - margin.bottom;\n      const buySellPoints = findBuySellPoints(closingPrices);\n      const svg = d3.select('#chart-container').append('svg').attr('width', width + margin.left + margin.right).attr('height', height + margin.top + margin.bottom).append('g').attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n      const parseDate = d3.timeParse('%Y-%m-%d');\n      const x = d3.scaleBand().range([0, width]).padding(0.1);\n      const y = d3.scaleLinear().domain([0, adjustedMaxPrice]).nice().range([height, 0]);\n      const yPlot = d3.scaleLinear().domain([0, maxPrice]).range([height, 0]);\n\n      // const info = closingPrices.map((price, index) => ({ date: `Day ${index + 1}`, price: price }));\n      const dates_prices = dates.map((date, index) => ({\n        date: date,\n        price: closingPrices[index]\n      })).sort((a, b) => new Date(a.date) - new Date(b.date));\n      x.domain(dates_prices.map(d => d.date));\n      y.domain([0, adjustedMaxPrice]);\n      svg.append('g').call(d3.axisLeft(y));\n      svg.append(\"text\").attr(\"transform\", \"rotate(-90)\").attr(\"y\", 0 - margin.left).attr(\"x\", 0 - height / 2).attr(\"dy\", \"1em\").style(\"text-anchor\", \"middle\").text(\"Price ($)\");\n      svg.append('g').attr('class', 'x-axis').attr('transform', 'translate(0,' + height + ')').call(d3.axisBottom(x)).selectAll('.tick text') // Select all x-axis text elements\n      .attr('class', 'x-axis-label').attr('transform', function (d, i) {\n        if (x.domain().length > 15) {\n          // If there are more than 15 dates, display only the first and last labels\n          if (i === 0 || i === x.domain().length - 1) {\n            return 'rotate(-45)';\n          } else {\n            // Hide other labels by making them transparent and setting text-anchor to middle\n            return 'rotate(0)';\n          }\n        } else {\n          // If there are 15 or fewer dates, rotate all labels\n          return 'rotate(-45)';\n        }\n      }).style('text-anchor', function (d, i) {\n        // Align the rotated text to the end for first and last labels; middle for others\n        if (x.domain().length > 15) {\n          if (i === 0 || i === x.domain().length - 1) {\n            return 'end';\n          } else {\n            return 'middle';\n          }\n        } else {\n          return 'end';\n        }\n      }).style('fill-opacity', function (d, i) {\n        // Set fill-opacity to 0 for labels that should be hidden\n        if (x.domain().length > 15) {\n          if (i === 0 || i === x.domain().length - 1) {\n            return 1; // Show first and last labels\n          } else {\n            return 0; // Hide other labels\n          }\n        } else {\n          return 1; // Show all labels if there are 15 or fewer dates\n        }\n      });\n\n      svg.append('text').attr('x', width / 2).attr('y', 0 - margin.top / 2).attr('text-anchor', 'middle').style('font-size', '18px').style('font-weight', 'bold').text(stockTicker);\n      const line = d3.line().x(d => x(d.date) + x.bandwidth() / 2) // Position the line in the middle of the band\n      .y(d => y(d.price)).curve(d3.curveBasis); // Use curveMonotoneX for smooth interpolation\n\n      svg.append('path').datum(dates_prices).attr('class', 'line').attr('d', line).attr('stroke', 'steelblue') // Set line color\n      .attr('stroke-width', 3) // Set line width\n      .attr('fill', 'none').attr('stroke-dasharray', function () {\n        const totalLength = this.getTotalLength();\n        return totalLength + \" \" + totalLength;\n      }).attr('stroke-dashoffset', function () {\n        return this.getTotalLength();\n      }).transition().duration(2000) // Set transition duration in milliseconds\n      .attr('stroke-dashoffset', 0);\n      const bisect = d3.bisector(d => d.date).left; // Create a bisector to find the closest data point\n\n      svg.select('.line').on('mousemove', function (event) {\n        const [mouseX, mouseY] = d3.pointer(event);\n        const index = bisect(dates_prices, mouseX - margin.left, 1);\n        const closestDataPoint = dates_prices[index];\n        const tooltip = d3.select('#tooltip');\n        const offsetX = 400;\n        const offsetY = 140;\n        tooltip.style('left', mouseX + offsetX + 'px').style('top', mouseY + offsetY + 'px').style('opacity', 1).html(`Price: $${closestDataPoint.price.toFixed(2)}`);\n      }).on('mouseout', function () {\n        d3.select('#tooltip').style('opacity', 0);\n      });\n\n      //Add circles for buy points\n      // svg.selectAll('.buy-circle')\n      //     .data(buySellPoints)\n      //     .enter().append('circle')\n      //     .attr('class', 'buy-circle')\n      //     .attr('cx', d => x(`Day ${d.buy.day + 1}`) + x.bandwidth() / 2) // Access the correct date from info array\n      //     .attr('cy', d => y(closingPrices[d.buy.day]))\n      //     .attr('r', 5)\n      //     .style('fill', 'green')\n\n      //Add circles for sell points\n      // svg.selectAll('.sell-circle')\n      //     .data(buySellPoints)\n      //     .enter().append('circle')\n      //     .attr('class', 'sell-circle')\n      //     .attr('cx', d => x(`Day ${d.sell.day + 1}`) + x.bandwidth() / 2) // Access the correct date from info array\n      //     .attr('cy', d => y(closingPrices[d.sell.day]))\n      //     .attr('r', 5)\n      //     .style('fill', 'red')\n\n      // Add circles for data points\n      // svg.selectAll('.dot')\n      // .data(dates_prices)\n      // .enter().append('circle')\n      // .attr('class', 'dot')\n      // .attr('cx', d => x(d.date) + x.bandwidth() / 2)\n      // .attr('cy', d => y(d.price))\n      // .attr('r', 0)  // Initial radius set to 0\n      // .transition()\n      // .delay(function(d, i) {\n      //     return i * 100;  // Add delay based on index to transition circles chronologically\n      // })\n      // .duration(500)  // Transition duration in milliseconds\n      // .attr('r', 5)  // Final radius set to 5;\n      // .on('mouseover', function(d) {\n      //     const mousePrice = d.price;\n      //     const tooltip = d3.select('#tooltip');\n      //     tooltip.transition().duration(200).style('opacity', 0.9);\n      //     tooltip.html(`Price: $${mousePrice}`)\n      //         .style('left', d3.event.pageX + 'px')  // Use d3.event.pageX instead of event.pageX\n      //         .style('top', d3.event.pageY - 28 + 'px');  // Use d3.event.pageY instead of event.pageY\n      // })\n\n      // .on('mouseout', function() {\n      //     // Hide tooltip on mouseout\n      //     d3.select('#tooltip').transition().duration(500).style('opacity', 0);\n      // });\n\n      const svgElements = document.querySelectorAll(\"svg\");\n\n      // Iterate over each SVG element and set the height\n      svgElements.forEach(svgElement => {\n        svgElement.style.height = height + margin.top + margin.bottom + 'px'; // Set the height including top and bottom margins\n      });\n\n      //Display max and min prices in the browser\n      const maxPriceElement = document.getElementById('max-price');\n      const minPriceElement = document.getElementById('min-price');\n      maxPriceElement.textContent = `Maximum Price: $${maxPrice}`;\n      minPriceElement.textContent = `Minimum Price: $${minPrice}`;\n\n      //Display multiple buy and sell points in the browser\n      const buySellPointsElement = document.getElementById('buy-sell-points');\n      buySellPointsElement.textContent = `Buy and Sell Points:\\n`;\n      buySellPoints.forEach(_ref => {\n        let {\n          buy,\n          sell\n        } = _ref;\n        buySellPointsElement.textContent += `Buy at Day ${buy.day + 1} ($${buy.price.toFixed(2)})\\nSell at Day ${sell.day + 1} ($${sell.price.toFixed(2)})\\n\\n`;\n      });\n\n      //Calculate and display net profit\n      const profitElement = document.getElementById('profit');\n      profitElement.textContent = \"Net Profit: \";\n      const netProfit = calculateInvestedProfit(investmentAmount, buySellPoints);\n      profitElement.textContent += `$${netProfit.toFixed(2)}`;\n\n      // Create a new SVG group for the bar plot\n      const barPlot = svg.append('g').attr('class', 'bar-plot');\n\n      // Calculate gross revenue for each buy-sell pair\n      const grossRevenues = [];\n      let grossRevenueFromInvestment = investmentAmount;\n      for (let i = 0; i < buySellPoints.length; i++) {\n        grossRevenueFromInvestment = grossRevenueFromInvestment / buySellPoints[i].buy.price * buySellPoints[i].sell.price;\n        grossRevenues.push(grossRevenueFromInvestment);\n      }\n\n      // Define X and Y scales for the bar plot\n      const xBarScale = d3.scaleBand().domain(d3.range(grossRevenues.length)).range([0, width]).padding(0.1);\n      const yBarScale = d3.scaleLinear().domain([0, d3.max(grossRevenues)]).nice().range([height, 0]);\n\n      // Add bars to the bar plot\n      barPlot.selectAll('.bar').data(grossRevenues).enter().append('rect').attr('class', 'bar').attr('x', (d, i) => xBarScale(i)).attr('y', d => yBarScale(d)).attr('width', xBarScale.bandwidth()).attr('height', d => height - yBarScale(d)).attr('fill', 'steelblue');\n\n      // Add labels for X and Y axes of the bar plot\n      barPlot.append('g').attr('class', 'x-axis').attr('transform', 'translate(0,' + height + ')').call(d3.axisBottom(xBarScale).tickFormat((d, i) => `Trade ${i + 1}`));\n      barPlot.append(\"text\").attr(\"transform\", \"rotate(-90)\").attr(\"y\", 0 - margin.left).attr(\"x\", 0 - height / 2).attr(\"dy\", \"1em\").style(\"text-anchor\", \"middle\").text(\"Gross Revenue\");\n    }).catch(error => {\n      console.error('Error:', error);\n    });\n  }\n  const handletickerSubmit = e => {\n    e.preventDefault();\n    stockButtons.forEach(button => {\n      button.classList.remove(\"hide\");\n    });\n    const tickerInput = document.querySelector(\".ticker-input\");\n    const dateInput = document.querySelector(\".date-input\");\n    const investmentInput = document.querySelector(\".investment-input\");\n    let stockTicker = tickerInput.value;\n    selectedDate = dateInput.value;\n    investmentAmount = parseFloat(investmentInput.value);\n    currentDate = new Date().toISOString().split('T')[0];\n    createGraph(stockTicker, selectedDate, currentDate, investmentAmount);\n  };\n  const listSubmitButton = document.querySelector(\".ticker-submit\");\n  listSubmitButton.addEventListener(\"click\", handletickerSubmit);\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaW5kZXguanMiLCJuYW1lcyI6WyJkb2N1bWVudCIsImFkZEV2ZW50TGlzdGVuZXIiLCJzZWxlY3RlZERhdGUiLCJpbnZlc3RtZW50QW1vdW50IiwiY3VycmVudERhdGUiLCJEYXRlIiwidG9JU09TdHJpbmciLCJzcGxpdCIsInN0b2NrQnV0dG9ucyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJmb3JFYWNoIiwiYnV0dG9uIiwiY2xhc3NMaXN0IiwiYWRkIiwiY3JlYXRlR3JhcGgiLCJmaW5kQnV5U2VsbFBvaW50cyIsInByaWNlcyIsIm4iLCJsZW5ndGgiLCJidXlTZWxsUG9pbnRzIiwiaSIsImJ1eSIsInNlbGwiLCJwdXNoIiwiZGF5IiwicHJpY2UiLCJjYWxjdWxhdGVJbnZlc3RlZFByb2ZpdCIsImdyb3NzUmV2ZW51ZUZyb21JbnZlc3RtZW50IiwibnVtU2hhcmVzIiwibmV0UHJvZml0IiwiYSIsImFwcGxlU3RvY2siLCJnZXRFbGVtZW50QnlJZCIsIm1zZnRTdG9jayIsInBsdHJTdG9jayIsInRzbGFTdG9jayIsInJlbW92ZUV4aXN0aW5nR3JhcGgiLCJleGlzdGluZ0dyYXBoIiwicXVlcnlTZWxlY3RvciIsInJlbW92ZSIsInN0b2NrVGlja2VyIiwiZmV0Y2giLCJ0aGVuIiwicmVzcG9uc2UiLCJqc29uIiwiZGF0YSIsImNsb3NpbmdQcmljZXMiLCJtYXAiLCJjbG9zZSIsImRhdGVzIiwiZGF0ZSIsInNsaWNlIiwibWF4UHJpY2UiLCJNYXRoIiwibWF4IiwiYWRqdXN0ZWRNYXhQcmljZSIsIm1pblByaWNlIiwibWluIiwibWFyZ2luIiwidG9wIiwicmlnaHQiLCJib3R0b20iLCJsZWZ0Iiwid2lkdGgiLCJoZWlnaHQiLCJzdmciLCJkMyIsInNlbGVjdCIsImFwcGVuZCIsImF0dHIiLCJwYXJzZURhdGUiLCJ0aW1lUGFyc2UiLCJ4Iiwic2NhbGVCYW5kIiwicmFuZ2UiLCJwYWRkaW5nIiwieSIsInNjYWxlTGluZWFyIiwiZG9tYWluIiwibmljZSIsInlQbG90IiwiZGF0ZXNfcHJpY2VzIiwiaW5kZXgiLCJzb3J0IiwiYiIsImQiLCJjYWxsIiwiYXhpc0xlZnQiLCJzdHlsZSIsInRleHQiLCJheGlzQm90dG9tIiwic2VsZWN0QWxsIiwibGluZSIsImJhbmR3aWR0aCIsImN1cnZlIiwiY3VydmVCYXNpcyIsImRhdHVtIiwidG90YWxMZW5ndGgiLCJnZXRUb3RhbExlbmd0aCIsInRyYW5zaXRpb24iLCJkdXJhdGlvbiIsImJpc2VjdCIsImJpc2VjdG9yIiwib24iLCJldmVudCIsIm1vdXNlWCIsIm1vdXNlWSIsInBvaW50ZXIiLCJjbG9zZXN0RGF0YVBvaW50IiwidG9vbHRpcCIsIm9mZnNldFgiLCJvZmZzZXRZIiwiaHRtbCIsInRvRml4ZWQiLCJzdmdFbGVtZW50cyIsInN2Z0VsZW1lbnQiLCJtYXhQcmljZUVsZW1lbnQiLCJtaW5QcmljZUVsZW1lbnQiLCJ0ZXh0Q29udGVudCIsImJ1eVNlbGxQb2ludHNFbGVtZW50IiwiX3JlZiIsInByb2ZpdEVsZW1lbnQiLCJiYXJQbG90IiwiZ3Jvc3NSZXZlbnVlcyIsInhCYXJTY2FsZSIsInlCYXJTY2FsZSIsImVudGVyIiwidGlja0Zvcm1hdCIsImNhdGNoIiwiZXJyb3IiLCJjb25zb2xlIiwiaGFuZGxldGlja2VyU3VibWl0IiwiZSIsInByZXZlbnREZWZhdWx0IiwidGlja2VySW5wdXQiLCJkYXRlSW5wdXQiLCJpbnZlc3RtZW50SW5wdXQiLCJ2YWx1ZSIsInBhcnNlRmxvYXQiLCJsaXN0U3VibWl0QnV0dG9uIl0sInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdG9jay1hcHAvLi9zcmMvaW5kZXguanM/YjYzNSJdLCJzb3VyY2VzQ29udGVudCI6WyJkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwiRE9NQ29udGVudExvYWRlZFwiLCAoKSA9PiB7XHJcbiAgICBsZXQgc2VsZWN0ZWREYXRlO1xyXG4gICAgbGV0IGludmVzdG1lbnRBbW91bnQ7XHJcbiAgICBsZXQgY3VycmVudERhdGUgPSBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCkuc3BsaXQoJ1QnKVswXTtcclxuICAgIGNvbnN0IHN0b2NrQnV0dG9ucyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIuYnV0dG9uLWNvbnRhaW5lciBidXR0b25cIik7XHJcbiAgICBzdG9ja0J1dHRvbnMuZm9yRWFjaChidXR0b24gPT4ge1xyXG4gICAgICAgIGJ1dHRvbi5jbGFzc0xpc3QuYWRkKFwiaGlkZVwiKTsgLy8gSW5pdGlhbGx5IGhpZGUgYWxsIHN0b2NrIGJ1dHRvbnNcclxuICAgIH0pO1xyXG5cclxuICAgIGNyZWF0ZUdyYXBoKFwiR09PR0xcIiwgXCIyMDIzLTAxLTAxXCIsIGN1cnJlbnREYXRlLCA1MDAwKTtcclxuXHJcbiAgICAvLyBjcmVhdGVFbXB0eUdyYXBoKCk7XHJcblxyXG4gICAgLy8gZnVuY3Rpb24gY3JlYXRlRW1wdHlHcmFwaCgpIHtcclxuICAgIC8vICAgICBjb25zdCBtYXJnaW4gPSB7IHRvcDogMjAsIHJpZ2h0OiAyMCwgYm90dG9tOiAzMCwgbGVmdDogNTAgfTtcclxuICAgIC8vICAgICBjb25zdCB3aWR0aCA9IDYwMCAtIG1hcmdpbi5sZWZ0IC0gbWFyZ2luLnJpZ2h0O1xyXG4gICAgLy8gICAgIGNvbnN0IGhlaWdodCA9IDQwMCAtIG1hcmdpbi50b3AgLSBtYXJnaW4uYm90dG9tO1xyXG5cclxuICAgIC8vICAgICBjb25zdCBzdmcgPSBkMy5zZWxlY3QoJyNjaGFydC1jb250YWluZXInKVxyXG4gICAgLy8gICAgICAgICAuYXBwZW5kKCdzdmcnKVxyXG4gICAgLy8gICAgICAgICAuYXR0cignd2lkdGgnLCB3aWR0aCArIG1hcmdpbi5sZWZ0ICsgbWFyZ2luLnJpZ2h0KVxyXG4gICAgLy8gICAgICAgICAuYXR0cignaGVpZ2h0JywgaGVpZ2h0ICsgbWFyZ2luLnRvcCArIG1hcmdpbi5ib3R0b20pXHJcbiAgICAvLyAgICAgICAgIC5hcHBlbmQoJ2cnKVxyXG4gICAgLy8gICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgJ3RyYW5zbGF0ZSgnICsgbWFyZ2luLmxlZnQgKyAnLCcgKyBtYXJnaW4udG9wICsgJyknKTtcclxuXHJcbiAgICAvLyAgICAgLy8gRGVmaW5lIFggYW5kIFkgc2NhbGVzXHJcbiAgICAvLyAgICAgY29uc3QgeFNjYWxlID0gZDMuc2NhbGVCYW5kKCkucmFuZ2UoWzAsIHdpZHRoXSkucGFkZGluZygwLjEpO1xyXG4gICAgLy8gICAgIGNvbnN0IHlTY2FsZSA9IGQzLnNjYWxlTGluZWFyKCkucmFuZ2UoW2hlaWdodCwgMF0pO1xyXG5cclxuICAgIC8vICAgICAvLyBBZGQgWCBhbmQgWSBheGlzIGVsZW1lbnRzXHJcbiAgICAvLyAgICAgY29uc3QgeEF4aXMgPSBkMy5heGlzQm90dG9tKHhTY2FsZSk7XHJcbiAgICAvLyAgICAgY29uc3QgeUF4aXMgPSBkMy5heGlzTGVmdCh5U2NhbGUpO1xyXG5cclxuICAgIC8vICAgICAvLyBBcHBlbmQgWCBhbmQgWSBheGVzIHRvIHRoZSBncmFwaFxyXG4gICAgLy8gICAgIHN2Zy5hcHBlbmQoJ2cnKVxyXG4gICAgLy8gICAgICAgICAuYXR0cignY2xhc3MnLCAneC1heGlzJylcclxuICAgIC8vICAgICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsICd0cmFuc2xhdGUoMCwnICsgaGVpZ2h0ICsgJyknKVxyXG4gICAgLy8gICAgICAgICAuY2FsbCh4QXhpcyk7XHJcblxyXG4gICAgLy8gICAgIHN2Zy5hcHBlbmQoJ2cnKVxyXG4gICAgLy8gICAgICAgICAuYXR0cignY2xhc3MnLCAneS1heGlzJylcclxuICAgIC8vICAgICAgICAgLmNhbGwoeUF4aXMpO1xyXG5cclxuICAgIC8vICAgICAvLyBBZGQgbGFiZWxzIGZvciBYIGFuZCBZIGF4ZXMgKGlmIG5lZWRlZClcclxuICAgIC8vICAgICBzdmcuYXBwZW5kKCd0ZXh0JylcclxuICAgIC8vICAgICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsICd0cmFuc2xhdGUoJyArICh3aWR0aCAvIDIpICsgJyAsJyArIChoZWlnaHQgKyBtYXJnaW4udG9wICsgMjApICsgJyknKVxyXG4gICAgLy8gICAgICAgICAuc3R5bGUoJ3RleHQtYW5jaG9yJywgJ21pZGRsZScpXHJcbiAgICAvLyAgICAgICAgIC50ZXh0KCdEYXRlJyk7XHJcblxyXG4gICAgLy8gICAgIHN2Zy5hcHBlbmQoJ3RleHQnKVxyXG4gICAgLy8gICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgJ3JvdGF0ZSgtOTApJylcclxuICAgIC8vICAgICAgICAgLmF0dHIoJ3knLCAwIC0gbWFyZ2luLmxlZnQpXHJcbiAgICAvLyAgICAgICAgIC5hdHRyKCd4JywgMCAtIChoZWlnaHQgLyAyKSlcclxuICAgIC8vICAgICAgICAgLmF0dHIoJ2R5JywgJzFlbScpXHJcbiAgICAvLyAgICAgICAgIC5zdHlsZSgndGV4dC1hbmNob3InLCAnbWlkZGxlJylcclxuICAgIC8vICAgICAgICAgLnRleHQoJ1ByaWNlICgkKScpO1xyXG5cclxuICAgIC8vICAgICBjb25zdCBzdmdFbGVtZW50cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJzdmdcIik7XHJcblxyXG4gICAgLy8gICAgIC8vIEl0ZXJhdGUgb3ZlciBlYWNoIFNWRyBlbGVtZW50IGFuZCBzZXQgdGhlIGhlaWdodFxyXG4gICAgLy8gICAgIHN2Z0VsZW1lbnRzLmZvckVhY2goc3ZnRWxlbWVudCA9PiB7XHJcbiAgICAvLyAgICAgICAgIHN2Z0VsZW1lbnQuc3R5bGUuaGVpZ2h0ID0gXCI1MDBweFwiO1xyXG4gICAgLy8gICAgIH0pO1xyXG4gICAgLy8gfVxyXG5cclxuXHJcblxyXG5cclxuICAgIGNvbnN0IGZpbmRCdXlTZWxsUG9pbnRzID0gKHByaWNlcykgPT4ge1xyXG4gICAgICAgIGxldCBuID0gcHJpY2VzLmxlbmd0aDtcclxuICAgICAgICBsZXQgYnV5U2VsbFBvaW50cyA9IFtdO1xyXG5cclxuICAgICAgICBsZXQgaSA9IDA7XHJcbiAgICAgICAgd2hpbGUgKGkgPCBuIC0gMSkge1xyXG4gICAgICAgICAgICAvLyBGaW5kIGxvY2FsIG1pbmltYSBhcyBwb3RlbnRpYWwgYnV5IHBvaW50XHJcbiAgICAgICAgICAgIHdoaWxlIChpIDwgbiAtIDEgJiYgcHJpY2VzW2ldID49IHByaWNlc1tpICsgMV0pIHtcclxuICAgICAgICAgICAgICAgIGkrKztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGkgPT09IG4gLSAxKSB7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgbGV0IGJ1eSA9IGk7XHJcblxyXG4gICAgICAgICAgICAvLyBGaW5kIGxvY2FsIG1heGltYSBhcyBwb3RlbnRpYWwgc2VsbCBwb2ludFxyXG4gICAgICAgICAgICB3aGlsZSAoaSA8IG4gLSAxICYmIHByaWNlc1tpXSA8PSBwcmljZXNbaSArIDFdKSB7XHJcbiAgICAgICAgICAgICAgICBpKys7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGxldCBzZWxsID0gaTtcclxuXHJcbiAgICAgICAgICAgIC8vIEFkZCBidXkgYW5kIHNlbGwgcG9pbnRzIHRvIHRoZSByZXN1bHQgYXJyYXlcclxuICAgICAgICAgICAgYnV5U2VsbFBvaW50cy5wdXNoKHsgYnV5OiB7IGRheTogYnV5LCBwcmljZTogcHJpY2VzW2J1eV0gfSwgc2VsbDogeyBkYXk6IHNlbGwsIHByaWNlOiBwcmljZXNbc2VsbF0gfSB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBidXlTZWxsUG9pbnRzO1xyXG5cclxuICAgIH07XHJcblxyXG4gICAgY29uc3QgY2FsY3VsYXRlSW52ZXN0ZWRQcm9maXQgPSAoaW52ZXN0bWVudEFtb3VudCwgYnV5U2VsbFBvaW50cykgPT4ge1xyXG4gICAgICAgIGxldCBncm9zc1JldmVudWVGcm9tSW52ZXN0bWVudCA9IGludmVzdG1lbnRBbW91bnQ7XHJcbiAgICAgICAgbGV0IG51bVNoYXJlcyA9IDA7XHJcbiAgICAgICAgbGV0IG5ldFByb2ZpdDtcclxuICAgICAgICBmb3IgKGxldCBhPTA7IGE8YnV5U2VsbFBvaW50cy5sZW5ndGg7IGErKykge1xyXG4gICAgICAgICAgICBudW1TaGFyZXMgPSBncm9zc1JldmVudWVGcm9tSW52ZXN0bWVudC9idXlTZWxsUG9pbnRzW2FdLmJ1eS5wcmljZTtcclxuICAgICAgICAgICAgZ3Jvc3NSZXZlbnVlRnJvbUludmVzdG1lbnQgPSBudW1TaGFyZXMqYnV5U2VsbFBvaW50c1thXS5zZWxsLnByaWNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbmV0UHJvZml0ID0gZ3Jvc3NSZXZlbnVlRnJvbUludmVzdG1lbnQgLSBpbnZlc3RtZW50QW1vdW50O1xyXG4gICAgICAgIHJldHVybiBuZXRQcm9maXQ7XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIGFwcGxlU3RvY2sgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImFwcGxlXCIpO1xyXG4gICAgYXBwbGVTdG9jay5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgY3JlYXRlR3JhcGgoXCJBQVBMXCIsIHNlbGVjdGVkRGF0ZSwgY3VycmVudERhdGUsIGludmVzdG1lbnRBbW91bnQpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgdmFyIG1zZnRTdG9jayA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibWljcm9zb2Z0XCIpO1xyXG4gICAgbXNmdFN0b2NrLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbigpIHtcclxuICAgICAgICBjcmVhdGVHcmFwaChcIk1TRlRcIiwgc2VsZWN0ZWREYXRlLCBjdXJyZW50RGF0ZSwgaW52ZXN0bWVudEFtb3VudCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICB2YXIgcGx0clN0b2NrID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJwYWxhbnRpclwiKTtcclxuICAgIHBsdHJTdG9jay5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgY3JlYXRlR3JhcGgoXCJQTFRSXCIsIHNlbGVjdGVkRGF0ZSwgY3VycmVudERhdGUsIGludmVzdG1lbnRBbW91bnQpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgdmFyIHRzbGFTdG9jayA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwidGVzbGFcIik7XHJcbiAgICB0c2xhU3RvY2suYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGNyZWF0ZUdyYXBoKFwiVFNMQVwiLCBzZWxlY3RlZERhdGUsIGN1cnJlbnREYXRlLCBpbnZlc3RtZW50QW1vdW50KTtcclxuICAgIH0pO1xyXG5cclxuICAgIGZ1bmN0aW9uIHJlbW92ZUV4aXN0aW5nR3JhcGgoKSB7XHJcbiAgICAgICAgY29uc3QgZXhpc3RpbmdHcmFwaCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNjaGFydC1jb250YWluZXIgc3ZnJyk7XHJcbiAgICAgICAgaWYgKGV4aXN0aW5nR3JhcGgpIHtcclxuICAgICAgICAgICAgZXhpc3RpbmdHcmFwaC5yZW1vdmUoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gY3JlYXRlR3JhcGgoc3RvY2tUaWNrZXIsIHNlbGVjdGVkRGF0ZSwgY3VycmVudERhdGUsIGludmVzdG1lbnRBbW91bnQpIHtcclxuICAgICAgICAvLyBjb25zdCBleGlzdGluZ0dyYXBoID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2NoYXJ0LWNvbnRhaW5lciBzdmc6bnRoLWNoaWxkKDIpJyk7XHJcbiAgICAgICAgLy8gY29uc3Qgc3ZnID0gZDMuc2VsZWN0KCcjY2hhcnQtY29udGFpbmVyIHN2ZycpO1xyXG4gICAgICAgIC8vIHN2Zy5zZWxlY3RBbGwoJyonKS5yZW1vdmUoKTtcclxuICAgICAgICAvLyBpZiAoZXhpc3RpbmdHcmFwaCkge1xyXG4gICAgICAgIC8vICAgICBleGlzdGluZ0dyYXBoLnJlbW92ZSgpO1xyXG4gICAgICAgIC8vIH1cclxuXHJcbiAgICAgICAgcmVtb3ZlRXhpc3RpbmdHcmFwaCgpO1xyXG5cclxuICAgICAgICBmZXRjaChgaHR0cDovL2FwaS5tYXJrZXRzdGFjay5jb20vdjEvZW9kP2FjY2Vzc19rZXk9YTEwMmZiM2YyNDZjZmM3NDhlYWJiMGNiYWZkMzVlMmImc3ltYm9scz0ke3N0b2NrVGlja2VyfSZkYXRlX2Zyb209JHtzZWxlY3RlZERhdGV9JmRhdGVfdG89JHtjdXJyZW50RGF0ZX1gKVxyXG4gICAgICAgIC50aGVuKHJlc3BvbnNlID0+IHJlc3BvbnNlLmpzb24oKSlcclxuICAgICAgICAudGhlbihkYXRhID0+IHtcclxuICAgICAgICAgICAgY29uc3QgY2xvc2luZ1ByaWNlcyA9IGRhdGEuZGF0YS5tYXAoZGF5ID0+IGRheS5jbG9zZSk7XHJcbiAgICAgICAgICAgIGNvbnN0IGRhdGVzID0gZGF0YS5kYXRhLm1hcChkYXRlID0+IGRhdGUuZGF0ZS5zbGljZSgwLDEwKSk7XHJcbiAgICAgICAgICAgIGNvbnN0IG1heFByaWNlID0gTWF0aC5tYXgoLi4uY2xvc2luZ1ByaWNlcyk7XHJcbiAgICAgICAgICAgIGNvbnN0IGFkanVzdGVkTWF4UHJpY2UgPSBtYXhQcmljZSAqIDEuMzU7XHJcbiAgICAgICAgICAgIGNvbnN0IG1pblByaWNlID0gTWF0aC5taW4oLi4uY2xvc2luZ1ByaWNlcyk7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBtYXJnaW4gPSB7IHRvcDogNjAsIHJpZ2h0OiAyMCwgYm90dG9tOiA1MCwgbGVmdDogNTAgfTtcclxuICAgICAgICAgICAgY29uc3Qgd2lkdGggPSA2MDAgLSBtYXJnaW4ubGVmdCAtIG1hcmdpbi5yaWdodDtcclxuICAgICAgICAgICAgY29uc3QgaGVpZ2h0ID0gNDAwIC0gbWFyZ2luLnRvcCAtIG1hcmdpbi5ib3R0b207XHJcbiAgICAgICAgICAgIGNvbnN0IGJ1eVNlbGxQb2ludHMgPSBmaW5kQnV5U2VsbFBvaW50cyhjbG9zaW5nUHJpY2VzKTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHN2ZyA9IGQzLnNlbGVjdCgnI2NoYXJ0LWNvbnRhaW5lcicpXHJcbiAgICAgICAgICAgIC5hcHBlbmQoJ3N2ZycpXHJcbiAgICAgICAgICAgIC5hdHRyKCd3aWR0aCcsIHdpZHRoICsgbWFyZ2luLmxlZnQgKyBtYXJnaW4ucmlnaHQpXHJcbiAgICAgICAgICAgIC5hdHRyKCdoZWlnaHQnLCBoZWlnaHQgKyBtYXJnaW4udG9wICsgbWFyZ2luLmJvdHRvbSlcclxuICAgICAgICAgICAgLmFwcGVuZCgnZycpXHJcbiAgICAgICAgICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCAndHJhbnNsYXRlKCcgKyBtYXJnaW4ubGVmdCArICcsJyArIG1hcmdpbi50b3AgKyAnKScpO1xyXG5cclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHBhcnNlRGF0ZSA9IGQzLnRpbWVQYXJzZSgnJVktJW0tJWQnKTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHggPSBkMy5zY2FsZUJhbmQoKS5yYW5nZShbMCwgd2lkdGhdKS5wYWRkaW5nKDAuMSk7XHJcbiAgICAgICAgICAgIGNvbnN0IHkgPSBkMy5zY2FsZUxpbmVhcigpLmRvbWFpbihbMCwgYWRqdXN0ZWRNYXhQcmljZV0pLm5pY2UoKS5yYW5nZShbaGVpZ2h0LCAwXSk7XHJcblxyXG4gICAgICAgICAgICBjb25zdCB5UGxvdCA9IGQzLnNjYWxlTGluZWFyKCkuZG9tYWluKFswLCBtYXhQcmljZV0pLnJhbmdlKFtoZWlnaHQsIDBdKTtcclxuXHJcbiAgICAgICAgICAgIC8vIGNvbnN0IGluZm8gPSBjbG9zaW5nUHJpY2VzLm1hcCgocHJpY2UsIGluZGV4KSA9PiAoeyBkYXRlOiBgRGF5ICR7aW5kZXggKyAxfWAsIHByaWNlOiBwcmljZSB9KSk7XHJcbiAgICAgICAgICAgIGNvbnN0IGRhdGVzX3ByaWNlcyA9IGRhdGVzLm1hcCgoZGF0ZSwgaW5kZXgpID0+ICh7IGRhdGU6IGRhdGUsIHByaWNlOiBjbG9zaW5nUHJpY2VzW2luZGV4XSB9KSkuc29ydCgoYSwgYikgPT4gbmV3IERhdGUoYS5kYXRlKSAtIG5ldyBEYXRlKGIuZGF0ZSkpO1xyXG4gICAgICAgICAgICB4LmRvbWFpbihkYXRlc19wcmljZXMubWFwKGQgPT4gZC5kYXRlKSk7XHJcbiAgICAgICAgICAgIHkuZG9tYWluKFswLCBhZGp1c3RlZE1heFByaWNlXSk7XHJcblxyXG4gICAgICAgICAgICBzdmcuYXBwZW5kKCdnJylcclxuICAgICAgICAgICAgLmNhbGwoZDMuYXhpc0xlZnQoeSkpO1xyXG5cclxuICAgICAgICAgICAgc3ZnLmFwcGVuZChcInRleHRcIilcclxuICAgICAgICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIFwicm90YXRlKC05MClcIilcclxuICAgICAgICAgICAgICAgIC5hdHRyKFwieVwiLCAwIC0gbWFyZ2luLmxlZnQpXHJcbiAgICAgICAgICAgICAgICAuYXR0cihcInhcIiwgMCAtIChoZWlnaHQgLyAyKSlcclxuICAgICAgICAgICAgICAgIC5hdHRyKFwiZHlcIiwgXCIxZW1cIilcclxuICAgICAgICAgICAgICAgIC5zdHlsZShcInRleHQtYW5jaG9yXCIsIFwibWlkZGxlXCIpXHJcbiAgICAgICAgICAgICAgICAudGV4dChcIlByaWNlICgkKVwiKTtcclxuXHJcbiAgICAgICAgICAgIHN2Zy5hcHBlbmQoJ2cnKVxyXG4gICAgICAgICAgICAgICAgLmF0dHIoJ2NsYXNzJywgJ3gtYXhpcycpXHJcbiAgICAgICAgICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgJ3RyYW5zbGF0ZSgwLCcgKyBoZWlnaHQgKyAnKScpXHJcbiAgICAgICAgICAgICAgICAuY2FsbChkMy5heGlzQm90dG9tKHgpKVxyXG4gICAgICAgICAgICAgICAgLnNlbGVjdEFsbCgnLnRpY2sgdGV4dCcpIC8vIFNlbGVjdCBhbGwgeC1heGlzIHRleHQgZWxlbWVudHNcclxuICAgICAgICAgICAgICAgIC5hdHRyKCdjbGFzcycsICd4LWF4aXMtbGFiZWwnKVxyXG4gICAgICAgICAgICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsIGZ1bmN0aW9uKGQsIGkpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoeC5kb21haW4oKS5sZW5ndGggPiAxNSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBJZiB0aGVyZSBhcmUgbW9yZSB0aGFuIDE1IGRhdGVzLCBkaXNwbGF5IG9ubHkgdGhlIGZpcnN0IGFuZCBsYXN0IGxhYmVsc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaSA9PT0gMCB8fCBpID09PSB4LmRvbWFpbigpLmxlbmd0aCAtIDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAncm90YXRlKC00NSknO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSGlkZSBvdGhlciBsYWJlbHMgYnkgbWFraW5nIHRoZW0gdHJhbnNwYXJlbnQgYW5kIHNldHRpbmcgdGV4dC1hbmNob3IgdG8gbWlkZGxlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ3JvdGF0ZSgwKSc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBJZiB0aGVyZSBhcmUgMTUgb3IgZmV3ZXIgZGF0ZXMsIHJvdGF0ZSBhbGwgbGFiZWxzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAncm90YXRlKC00NSknO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAuc3R5bGUoJ3RleHQtYW5jaG9yJywgZnVuY3Rpb24oZCwgaSkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIEFsaWduIHRoZSByb3RhdGVkIHRleHQgdG8gdGhlIGVuZCBmb3IgZmlyc3QgYW5kIGxhc3QgbGFiZWxzOyBtaWRkbGUgZm9yIG90aGVyc1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh4LmRvbWFpbigpLmxlbmd0aCA+IDE1KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpID09PSAwIHx8IGkgPT09IHguZG9tYWluKCkubGVuZ3RoIC0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdlbmQnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdtaWRkbGUnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdlbmQnO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAuc3R5bGUoJ2ZpbGwtb3BhY2l0eScsIGZ1bmN0aW9uKGQsIGkpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBTZXQgZmlsbC1vcGFjaXR5IHRvIDAgZm9yIGxhYmVscyB0aGF0IHNob3VsZCBiZSBoaWRkZW5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoeC5kb21haW4oKS5sZW5ndGggPiAxNSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaSA9PT0gMCB8fCBpID09PSB4LmRvbWFpbigpLmxlbmd0aCAtIDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAxOyAvLyBTaG93IGZpcnN0IGFuZCBsYXN0IGxhYmVsc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDA7IC8vIEhpZGUgb3RoZXIgbGFiZWxzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gMTsgLy8gU2hvdyBhbGwgbGFiZWxzIGlmIHRoZXJlIGFyZSAxNSBvciBmZXdlciBkYXRlc1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgc3ZnLmFwcGVuZCgndGV4dCcpXHJcbiAgICAgICAgICAgICAgICAuYXR0cigneCcsIHdpZHRoIC8gMilcclxuICAgICAgICAgICAgICAgIC5hdHRyKCd5JywgMCAtIG1hcmdpbi50b3AgLyAyKVxyXG4gICAgICAgICAgICAgICAgLmF0dHIoJ3RleHQtYW5jaG9yJywgJ21pZGRsZScpXHJcbiAgICAgICAgICAgICAgICAuc3R5bGUoJ2ZvbnQtc2l6ZScsICcxOHB4JylcclxuICAgICAgICAgICAgICAgIC5zdHlsZSgnZm9udC13ZWlnaHQnLCAnYm9sZCcpXHJcbiAgICAgICAgICAgICAgICAudGV4dChzdG9ja1RpY2tlcik7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBsaW5lID0gZDMubGluZSgpXHJcbiAgICAgICAgICAgICAgICAueChkID0+IHgoZC5kYXRlKSArIHguYmFuZHdpZHRoKCkgLyAyKSAvLyBQb3NpdGlvbiB0aGUgbGluZSBpbiB0aGUgbWlkZGxlIG9mIHRoZSBiYW5kXHJcbiAgICAgICAgICAgICAgICAueShkID0+IHkoZC5wcmljZSkpXHJcbiAgICAgICAgICAgICAgICAuY3VydmUoZDMuY3VydmVCYXNpcyk7IC8vIFVzZSBjdXJ2ZU1vbm90b25lWCBmb3Igc21vb3RoIGludGVycG9sYXRpb25cclxuXHJcbiAgICAgICAgICAgICAgICBzdmcuYXBwZW5kKCdwYXRoJylcclxuICAgICAgICAgICAgICAgIC5kYXR1bShkYXRlc19wcmljZXMpXHJcbiAgICAgICAgICAgICAgICAuYXR0cignY2xhc3MnLCAnbGluZScpXHJcbiAgICAgICAgICAgICAgICAuYXR0cignZCcsIGxpbmUpXHJcbiAgICAgICAgICAgICAgICAuYXR0cignc3Ryb2tlJywgJ3N0ZWVsYmx1ZScpIC8vIFNldCBsaW5lIGNvbG9yXHJcbiAgICAgICAgICAgICAgICAuYXR0cignc3Ryb2tlLXdpZHRoJywgMykgICAgICAvLyBTZXQgbGluZSB3aWR0aFxyXG4gICAgICAgICAgICAgICAgLmF0dHIoJ2ZpbGwnLCAnbm9uZScpXHJcbiAgICAgICAgICAgICAgICAuYXR0cignc3Ryb2tlLWRhc2hhcnJheScsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHRvdGFsTGVuZ3RoID0gdGhpcy5nZXRUb3RhbExlbmd0aCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0b3RhbExlbmd0aCArIFwiIFwiICsgdG90YWxMZW5ndGg7XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLmF0dHIoJ3N0cm9rZS1kYXNob2Zmc2V0JywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0VG90YWxMZW5ndGgoKTtcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAudHJhbnNpdGlvbigpXHJcbiAgICAgICAgICAgICAgICAuZHVyYXRpb24oMjAwMCkgIC8vIFNldCB0cmFuc2l0aW9uIGR1cmF0aW9uIGluIG1pbGxpc2Vjb25kc1xyXG4gICAgICAgICAgICAgICAgLmF0dHIoJ3N0cm9rZS1kYXNob2Zmc2V0JywgMCk7XHJcblxyXG4gICAgICAgICAgICAgICAgY29uc3QgYmlzZWN0ID0gZDMuYmlzZWN0b3IoZCA9PiBkLmRhdGUpLmxlZnQ7IC8vIENyZWF0ZSBhIGJpc2VjdG9yIHRvIGZpbmQgdGhlIGNsb3Nlc3QgZGF0YSBwb2ludFxyXG5cclxuICAgICAgICAgICAgICAgIHN2Zy5zZWxlY3QoJy5saW5lJylcclxuICAgICAgICAgICAgICAgIC5vbignbW91c2Vtb3ZlJywgZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgW21vdXNlWCwgbW91c2VZXSA9IGQzLnBvaW50ZXIoZXZlbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gYmlzZWN0KGRhdGVzX3ByaWNlcywgbW91c2VYIC0gbWFyZ2luLmxlZnQsIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNsb3Nlc3REYXRhUG9pbnQgPSBkYXRlc19wcmljZXNbaW5kZXhdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBjb25zdCB0b29sdGlwID0gZDMuc2VsZWN0KCcjdG9vbHRpcCcpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG9mZnNldFggPSA0MDA7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgb2Zmc2V0WSA9IDE0MDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdG9vbHRpcC5zdHlsZSgnbGVmdCcsIG1vdXNlWCArIG9mZnNldFggKyAncHgnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuc3R5bGUoJ3RvcCcsIG1vdXNlWSArIG9mZnNldFkgKyAncHgnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuc3R5bGUoJ29wYWNpdHknLCAxKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuaHRtbChgUHJpY2U6ICQke2Nsb3Nlc3REYXRhUG9pbnQucHJpY2UudG9GaXhlZCgyKX1gKTtcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAub24oJ21vdXNlb3V0JywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGQzLnNlbGVjdCgnI3Rvb2x0aXAnKS5zdHlsZSgnb3BhY2l0eScsIDApO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAvL0FkZCBjaXJjbGVzIGZvciBidXkgcG9pbnRzXHJcbiAgICAgICAgICAgIC8vIHN2Zy5zZWxlY3RBbGwoJy5idXktY2lyY2xlJylcclxuICAgICAgICAgICAgLy8gICAgIC5kYXRhKGJ1eVNlbGxQb2ludHMpXHJcbiAgICAgICAgICAgIC8vICAgICAuZW50ZXIoKS5hcHBlbmQoJ2NpcmNsZScpXHJcbiAgICAgICAgICAgIC8vICAgICAuYXR0cignY2xhc3MnLCAnYnV5LWNpcmNsZScpXHJcbiAgICAgICAgICAgIC8vICAgICAuYXR0cignY3gnLCBkID0+IHgoYERheSAke2QuYnV5LmRheSArIDF9YCkgKyB4LmJhbmR3aWR0aCgpIC8gMikgLy8gQWNjZXNzIHRoZSBjb3JyZWN0IGRhdGUgZnJvbSBpbmZvIGFycmF5XHJcbiAgICAgICAgICAgIC8vICAgICAuYXR0cignY3knLCBkID0+IHkoY2xvc2luZ1ByaWNlc1tkLmJ1eS5kYXldKSlcclxuICAgICAgICAgICAgLy8gICAgIC5hdHRyKCdyJywgNSlcclxuICAgICAgICAgICAgLy8gICAgIC5zdHlsZSgnZmlsbCcsICdncmVlbicpXHJcblxyXG4gICAgICAgICAgICAvL0FkZCBjaXJjbGVzIGZvciBzZWxsIHBvaW50c1xyXG4gICAgICAgICAgICAvLyBzdmcuc2VsZWN0QWxsKCcuc2VsbC1jaXJjbGUnKVxyXG4gICAgICAgICAgICAvLyAgICAgLmRhdGEoYnV5U2VsbFBvaW50cylcclxuICAgICAgICAgICAgLy8gICAgIC5lbnRlcigpLmFwcGVuZCgnY2lyY2xlJylcclxuICAgICAgICAgICAgLy8gICAgIC5hdHRyKCdjbGFzcycsICdzZWxsLWNpcmNsZScpXHJcbiAgICAgICAgICAgIC8vICAgICAuYXR0cignY3gnLCBkID0+IHgoYERheSAke2Quc2VsbC5kYXkgKyAxfWApICsgeC5iYW5kd2lkdGgoKSAvIDIpIC8vIEFjY2VzcyB0aGUgY29ycmVjdCBkYXRlIGZyb20gaW5mbyBhcnJheVxyXG4gICAgICAgICAgICAvLyAgICAgLmF0dHIoJ2N5JywgZCA9PiB5KGNsb3NpbmdQcmljZXNbZC5zZWxsLmRheV0pKVxyXG4gICAgICAgICAgICAvLyAgICAgLmF0dHIoJ3InLCA1KVxyXG4gICAgICAgICAgICAvLyAgICAgLnN0eWxlKCdmaWxsJywgJ3JlZCcpXHJcblxyXG4gICAgICAgICAgICAvLyBBZGQgY2lyY2xlcyBmb3IgZGF0YSBwb2ludHNcclxuICAgICAgICAgICAgLy8gc3ZnLnNlbGVjdEFsbCgnLmRvdCcpXHJcbiAgICAgICAgICAgIC8vIC5kYXRhKGRhdGVzX3ByaWNlcylcclxuICAgICAgICAgICAgLy8gLmVudGVyKCkuYXBwZW5kKCdjaXJjbGUnKVxyXG4gICAgICAgICAgICAvLyAuYXR0cignY2xhc3MnLCAnZG90JylcclxuICAgICAgICAgICAgLy8gLmF0dHIoJ2N4JywgZCA9PiB4KGQuZGF0ZSkgKyB4LmJhbmR3aWR0aCgpIC8gMilcclxuICAgICAgICAgICAgLy8gLmF0dHIoJ2N5JywgZCA9PiB5KGQucHJpY2UpKVxyXG4gICAgICAgICAgICAvLyAuYXR0cigncicsIDApICAvLyBJbml0aWFsIHJhZGl1cyBzZXQgdG8gMFxyXG4gICAgICAgICAgICAvLyAudHJhbnNpdGlvbigpXHJcbiAgICAgICAgICAgIC8vIC5kZWxheShmdW5jdGlvbihkLCBpKSB7XHJcbiAgICAgICAgICAgIC8vICAgICByZXR1cm4gaSAqIDEwMDsgIC8vIEFkZCBkZWxheSBiYXNlZCBvbiBpbmRleCB0byB0cmFuc2l0aW9uIGNpcmNsZXMgY2hyb25vbG9naWNhbGx5XHJcbiAgICAgICAgICAgIC8vIH0pXHJcbiAgICAgICAgICAgIC8vIC5kdXJhdGlvbig1MDApICAvLyBUcmFuc2l0aW9uIGR1cmF0aW9uIGluIG1pbGxpc2Vjb25kc1xyXG4gICAgICAgICAgICAvLyAuYXR0cigncicsIDUpICAvLyBGaW5hbCByYWRpdXMgc2V0IHRvIDU7XHJcbiAgICAgICAgICAgIC8vIC5vbignbW91c2VvdmVyJywgZnVuY3Rpb24oZCkge1xyXG4gICAgICAgICAgICAvLyAgICAgY29uc3QgbW91c2VQcmljZSA9IGQucHJpY2U7XHJcbiAgICAgICAgICAgIC8vICAgICBjb25zdCB0b29sdGlwID0gZDMuc2VsZWN0KCcjdG9vbHRpcCcpO1xyXG4gICAgICAgICAgICAvLyAgICAgdG9vbHRpcC50cmFuc2l0aW9uKCkuZHVyYXRpb24oMjAwKS5zdHlsZSgnb3BhY2l0eScsIDAuOSk7XHJcbiAgICAgICAgICAgIC8vICAgICB0b29sdGlwLmh0bWwoYFByaWNlOiAkJHttb3VzZVByaWNlfWApXHJcbiAgICAgICAgICAgIC8vICAgICAgICAgLnN0eWxlKCdsZWZ0JywgZDMuZXZlbnQucGFnZVggKyAncHgnKSAgLy8gVXNlIGQzLmV2ZW50LnBhZ2VYIGluc3RlYWQgb2YgZXZlbnQucGFnZVhcclxuICAgICAgICAgICAgLy8gICAgICAgICAuc3R5bGUoJ3RvcCcsIGQzLmV2ZW50LnBhZ2VZIC0gMjggKyAncHgnKTsgIC8vIFVzZSBkMy5ldmVudC5wYWdlWSBpbnN0ZWFkIG9mIGV2ZW50LnBhZ2VZXHJcbiAgICAgICAgICAgIC8vIH0pXHJcblxyXG4gICAgICAgICAgICAvLyAub24oJ21vdXNlb3V0JywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIC8vICAgICAvLyBIaWRlIHRvb2x0aXAgb24gbW91c2VvdXRcclxuICAgICAgICAgICAgLy8gICAgIGQzLnNlbGVjdCgnI3Rvb2x0aXAnKS50cmFuc2l0aW9uKCkuZHVyYXRpb24oNTAwKS5zdHlsZSgnb3BhY2l0eScsIDApO1xyXG4gICAgICAgICAgICAvLyB9KTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHN2Z0VsZW1lbnRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcInN2Z1wiKTtcclxuXHJcbiAgICAgICAgICAgIC8vIEl0ZXJhdGUgb3ZlciBlYWNoIFNWRyBlbGVtZW50IGFuZCBzZXQgdGhlIGhlaWdodFxyXG4gICAgICAgICAgICBzdmdFbGVtZW50cy5mb3JFYWNoKHN2Z0VsZW1lbnQgPT4ge1xyXG4gICAgICAgICAgICAgICAgc3ZnRWxlbWVudC5zdHlsZS5oZWlnaHQgPSBoZWlnaHQgKyBtYXJnaW4udG9wICsgbWFyZ2luLmJvdHRvbSArICdweCc7IC8vIFNldCB0aGUgaGVpZ2h0IGluY2x1ZGluZyB0b3AgYW5kIGJvdHRvbSBtYXJnaW5zXHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgLy9EaXNwbGF5IG1heCBhbmQgbWluIHByaWNlcyBpbiB0aGUgYnJvd3NlclxyXG4gICAgICAgICAgICBjb25zdCBtYXhQcmljZUVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbWF4LXByaWNlJyk7XHJcbiAgICAgICAgICAgIGNvbnN0IG1pblByaWNlRWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtaW4tcHJpY2UnKTtcclxuICAgICAgICAgICAgbWF4UHJpY2VFbGVtZW50LnRleHRDb250ZW50ID0gYE1heGltdW0gUHJpY2U6ICQke21heFByaWNlfWA7XHJcbiAgICAgICAgICAgIG1pblByaWNlRWxlbWVudC50ZXh0Q29udGVudCA9IGBNaW5pbXVtIFByaWNlOiAkJHttaW5QcmljZX1gO1xyXG5cclxuICAgICAgICAgICAgLy9EaXNwbGF5IG11bHRpcGxlIGJ1eSBhbmQgc2VsbCBwb2ludHMgaW4gdGhlIGJyb3dzZXJcclxuICAgICAgICAgICAgY29uc3QgYnV5U2VsbFBvaW50c0VsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYnV5LXNlbGwtcG9pbnRzJyk7XHJcbiAgICAgICAgICAgIGJ1eVNlbGxQb2ludHNFbGVtZW50LnRleHRDb250ZW50ID0gYEJ1eSBhbmQgU2VsbCBQb2ludHM6XFxuYDtcclxuICAgICAgICAgICAgYnV5U2VsbFBvaW50cy5mb3JFYWNoKCh7IGJ1eSwgc2VsbCB9KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBidXlTZWxsUG9pbnRzRWxlbWVudC50ZXh0Q29udGVudCArPSBgQnV5IGF0IERheSAke2J1eS5kYXkgKyAxfSAoJCR7YnV5LnByaWNlLnRvRml4ZWQoMil9KVxcblNlbGwgYXQgRGF5ICR7c2VsbC5kYXkgKyAxfSAoJCR7c2VsbC5wcmljZS50b0ZpeGVkKDIpfSlcXG5cXG5gO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcblxyXG4gICAgICAgICAgICAvL0NhbGN1bGF0ZSBhbmQgZGlzcGxheSBuZXQgcHJvZml0XHJcbiAgICAgICAgICAgIGNvbnN0IHByb2ZpdEVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncHJvZml0Jyk7XHJcbiAgICAgICAgICAgIHByb2ZpdEVsZW1lbnQudGV4dENvbnRlbnQgPSBcIk5ldCBQcm9maXQ6IFwiO1xyXG4gICAgICAgICAgICBjb25zdCBuZXRQcm9maXQgPSBjYWxjdWxhdGVJbnZlc3RlZFByb2ZpdChpbnZlc3RtZW50QW1vdW50LCBidXlTZWxsUG9pbnRzKTtcclxuICAgICAgICAgICAgcHJvZml0RWxlbWVudC50ZXh0Q29udGVudCArPSBgJCR7bmV0UHJvZml0LnRvRml4ZWQoMil9YDtcclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcbiAgICAgICAgICAgIC8vIENyZWF0ZSBhIG5ldyBTVkcgZ3JvdXAgZm9yIHRoZSBiYXIgcGxvdFxyXG4gICAgICAgICAgICBjb25zdCBiYXJQbG90ID0gc3ZnLmFwcGVuZCgnZycpLmF0dHIoJ2NsYXNzJywgJ2Jhci1wbG90Jyk7XHJcblxyXG4gICAgICAgICAgICAvLyBDYWxjdWxhdGUgZ3Jvc3MgcmV2ZW51ZSBmb3IgZWFjaCBidXktc2VsbCBwYWlyXHJcbiAgICAgICAgICAgIGNvbnN0IGdyb3NzUmV2ZW51ZXMgPSBbXTtcclxuICAgICAgICAgICAgbGV0IGdyb3NzUmV2ZW51ZUZyb21JbnZlc3RtZW50ID0gaW52ZXN0bWVudEFtb3VudDtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBidXlTZWxsUG9pbnRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBncm9zc1JldmVudWVGcm9tSW52ZXN0bWVudCA9IChncm9zc1JldmVudWVGcm9tSW52ZXN0bWVudCAvIGJ1eVNlbGxQb2ludHNbaV0uYnV5LnByaWNlKSAqIGJ1eVNlbGxQb2ludHNbaV0uc2VsbC5wcmljZTtcclxuICAgICAgICAgICAgICAgIGdyb3NzUmV2ZW51ZXMucHVzaChncm9zc1JldmVudWVGcm9tSW52ZXN0bWVudCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIERlZmluZSBYIGFuZCBZIHNjYWxlcyBmb3IgdGhlIGJhciBwbG90XHJcbiAgICAgICAgICAgIGNvbnN0IHhCYXJTY2FsZSA9IGQzLnNjYWxlQmFuZCgpLmRvbWFpbihkMy5yYW5nZShncm9zc1JldmVudWVzLmxlbmd0aCkpLnJhbmdlKFswLCB3aWR0aF0pLnBhZGRpbmcoMC4xKTtcclxuICAgICAgICAgICAgY29uc3QgeUJhclNjYWxlID0gZDMuc2NhbGVMaW5lYXIoKS5kb21haW4oWzAsIGQzLm1heChncm9zc1JldmVudWVzKV0pLm5pY2UoKS5yYW5nZShbaGVpZ2h0LCAwXSk7XHJcblxyXG4gICAgICAgICAgICAvLyBBZGQgYmFycyB0byB0aGUgYmFyIHBsb3RcclxuICAgICAgICAgICAgYmFyUGxvdC5zZWxlY3RBbGwoJy5iYXInKVxyXG4gICAgICAgICAgICAgICAgLmRhdGEoZ3Jvc3NSZXZlbnVlcylcclxuICAgICAgICAgICAgICAgIC5lbnRlcigpLmFwcGVuZCgncmVjdCcpXHJcbiAgICAgICAgICAgICAgICAuYXR0cignY2xhc3MnLCAnYmFyJylcclxuICAgICAgICAgICAgICAgIC5hdHRyKCd4JywgKGQsIGkpID0+IHhCYXJTY2FsZShpKSlcclxuICAgICAgICAgICAgICAgIC5hdHRyKCd5JywgZCA9PiB5QmFyU2NhbGUoZCkpXHJcbiAgICAgICAgICAgICAgICAuYXR0cignd2lkdGgnLCB4QmFyU2NhbGUuYmFuZHdpZHRoKCkpXHJcbiAgICAgICAgICAgICAgICAuYXR0cignaGVpZ2h0JywgZCA9PiBoZWlnaHQgLSB5QmFyU2NhbGUoZCkpXHJcbiAgICAgICAgICAgICAgICAuYXR0cignZmlsbCcsICdzdGVlbGJsdWUnKTtcclxuXHJcbiAgICAgICAgICAgIC8vIEFkZCBsYWJlbHMgZm9yIFggYW5kIFkgYXhlcyBvZiB0aGUgYmFyIHBsb3RcclxuICAgICAgICAgICAgYmFyUGxvdC5hcHBlbmQoJ2cnKVxyXG4gICAgICAgICAgICAgICAgLmF0dHIoJ2NsYXNzJywgJ3gtYXhpcycpXHJcbiAgICAgICAgICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgJ3RyYW5zbGF0ZSgwLCcgKyBoZWlnaHQgKyAnKScpXHJcbiAgICAgICAgICAgICAgICAuY2FsbChkMy5heGlzQm90dG9tKHhCYXJTY2FsZSlcclxuICAgICAgICAgICAgICAgICAgICAudGlja0Zvcm1hdCgoZCwgaSkgPT4gYFRyYWRlICR7aSArIDF9YClcclxuICAgICAgICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgICBiYXJQbG90LmFwcGVuZChcInRleHRcIilcclxuICAgICAgICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIFwicm90YXRlKC05MClcIilcclxuICAgICAgICAgICAgICAgIC5hdHRyKFwieVwiLCAwIC0gbWFyZ2luLmxlZnQpXHJcbiAgICAgICAgICAgICAgICAuYXR0cihcInhcIiwgMCAtIChoZWlnaHQgLyAyKSlcclxuICAgICAgICAgICAgICAgIC5hdHRyKFwiZHlcIiwgXCIxZW1cIilcclxuICAgICAgICAgICAgICAgIC5zdHlsZShcInRleHQtYW5jaG9yXCIsIFwibWlkZGxlXCIpXHJcbiAgICAgICAgICAgICAgICAudGV4dChcIkdyb3NzIFJldmVudWVcIik7XHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuICAgICAgICB9KVxyXG5cclxuICAgICAgICAuY2F0Y2goZXJyb3IgPT4ge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvcjonLCBlcnJvcik7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgaGFuZGxldGlja2VyU3VibWl0ID0gKGUpID0+IHtcclxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgc3RvY2tCdXR0b25zLmZvckVhY2goYnV0dG9uID0+IHtcclxuICAgICAgICAgICAgYnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUoXCJoaWRlXCIpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBjb25zdCB0aWNrZXJJbnB1dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIudGlja2VyLWlucHV0XCIpO1xyXG4gICAgICAgIGNvbnN0IGRhdGVJbnB1dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuZGF0ZS1pbnB1dFwiKTtcclxuICAgICAgICBjb25zdCBpbnZlc3RtZW50SW5wdXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmludmVzdG1lbnQtaW5wdXRcIik7XHJcbiAgICAgICAgbGV0IHN0b2NrVGlja2VyID0gdGlja2VySW5wdXQudmFsdWU7XHJcbiAgICAgICAgc2VsZWN0ZWREYXRlID0gZGF0ZUlucHV0LnZhbHVlO1xyXG4gICAgICAgIGludmVzdG1lbnRBbW91bnQgPSBwYXJzZUZsb2F0KGludmVzdG1lbnRJbnB1dC52YWx1ZSk7XHJcbiAgICAgICAgY3VycmVudERhdGUgPSBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCkuc3BsaXQoJ1QnKVswXTtcclxuXHJcbiAgICAgICAgY3JlYXRlR3JhcGgoc3RvY2tUaWNrZXIsIHNlbGVjdGVkRGF0ZSwgY3VycmVudERhdGUsIGludmVzdG1lbnRBbW91bnQpO1xyXG5cclxuICAgIH07XHJcblxyXG4gICAgY29uc3QgbGlzdFN1Ym1pdEJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIudGlja2VyLXN1Ym1pdFwiKTtcclxuICAgIGxpc3RTdWJtaXRCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGhhbmRsZXRpY2tlclN1Ym1pdCk7XHJcbn0pO1xyXG4iXSwibWFwcGluZ3MiOiJBQUFBQSxRQUFRLENBQUNDLGdCQUFnQixDQUFDLGtCQUFrQixFQUFFLE1BQU07RUFD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\n//# sourceURL=webpack-internal:///./src/index.js\n");

/***/ }),

/***/ "./src/index.scss":
/*!************************!*\
  !*** ./src/index.scss ***!
  \************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaW5kZXguc2NzcyIsIm1hcHBpbmdzIjoiO0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdG9jay1hcHAvLi9zcmMvaW5kZXguc2Nzcz85NzQ1Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuZXhwb3J0IHt9OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/index.scss\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	!function() {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = function(exports) {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	}();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	__webpack_modules__["./src/index.js"](0, {}, __webpack_require__);
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/index.scss"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ })()
;